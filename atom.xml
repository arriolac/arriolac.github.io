<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chris Arriola]]></title>
  <link href="http://chrisarriola.me/atom.xml" rel="self"/>
  <link href="http://chrisarriola.me/"/>
  <updated>2017-07-06T12:06:01-05:00</updated>
  <id>http://chrisarriola.me/</id>
  <author>
    <name><![CDATA[Chris Arriola]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Observables to Render Responsive Lists: An RxJava Case Study - Part 1 of 3]]></title>
    <link href="http://chrisarriola.me/blog/2017/07/06/using-observables-to-render-responsive-lists-an-rxjava-case-study-part-1-of-3/"/>
    <updated>2017-07-06T09:40:26-05:00</updated>
    <id>http://chrisarriola.me/blog/2017/07/06/using-observables-to-render-responsive-lists-an-rxjava-case-study-part-1-of-3</id>
    <content type="html"><![CDATA[<p><em>This post was originally posted on <a href="https://medium.com/joinpre/using-observables-to-render-responsive-lists-an-rxjava-case-study-part-1-of-3-53dd83af2c08">Medium</a>.</em></p>

<p>This is the 1st part of a 3 part series about how RxJava is used in <a href="https://pre.co/">Pre</a>, a location-based app for checking in and chatting with your best friends. In this first post, I will go over how we used Observables to compose a complex view that displays a list of items, specifically, the <em>dashboard</em> view.</p>

<p>If you are new to RxJava, I recommend <a href="http://chrisarriola.me/blog/2016/09/04/introduction-to-rxjava-for-android/">starting here</a>. You can also check out a <a href="https://leanpub.com/reactiveandroid">book</a> Angus Huang and I wrote if you would like a more comprehensive learning resource on RxJava.</p>

<p>Note that all of the code samples in this series are written in Kotlin. In addition to RxJava, we use RxKotlin which is a lightweight library that provides convenient extension functions to RxJava.</p>

<h2>Dashboard View</h2>

<p><img class="center" src="http://chrisarriola.me/images/pre_dashboard_view.png"></p>

<p>The dashboard view is the first view presented to the user upon logging in. It contains 2 sections: (1) a section displaying a list of recent check-ins from your friends, and (2) a section displaying a list of all your friends. The latter is displayed by querying the data layer for all of your friends, followed by querying the most recent message in the conversation thread for each of your friends. The state of the message will then determine if an unread indicator, or if a relative timestamp of when that message was sent, should be displayed.</p>

<p><img class="center" src="http://chrisarriola.me/images/pre_dashboard_unread.png" title="'Friend with unread message'" ></p>

<p><img class="center" src="http://chrisarriola.me/images/pre_dashboard_read.png" title="'Friend with no unread message'" ></p>

<p>Both the <em>Friend</em> and <em>Message</em> models are persisted in a local SQLite database. To prevent jankiness while scrolling, retrieving these models should be done before rendering the list. More specifically, we want to make sure that we have all of the Friend objects and the corresponding latest Message in memory before setting the list of friends to the Adapter of the RecyclerView.</p>

<p>Before we dive into Observables and how RxJava fits into the picture, let’s look at a few classes that compose the dashboard view. Note that even though some of the classes here have been shortened for brevity, the underlying concepts should be the same.</p>

<h2>Non-Reactive Parts</h2>

<h3>DashboardFriendViewModel</h3>

<p>On the dashboard, the <em>DashboardFriendViewModel</em> class is in charge of binding the <em>Friend</em> and <em>Message</em> models to a single friend view. True to the <em>ViewModel</em> design pattern, this class provides us with the benefit of abstracting away model details from the view layer. So if our model changes, we would only need to update the <em>ViewModel</em>’s code (i.e. <em>DashboardFriendViewModel</em>), and not the view’s code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data class DashboardFriendViewModel(
</span><span class='line'>   val emoji: String,
</span><span class='line'>   val title: String,
</span><span class='line'>   val subtitle: String,
</span><span class='line'>   val hasUnread: Boolean
</span><span class='line'>) {
</span><span class='line'>   companion object Factory {
</span><span class='line'>       @JvmStatic fun create(
</span><span class='line'>           friend: Friend,
</span><span class='line'>           message: Message
</span><span class='line'>       ) : DashboardFriendViewModel {
</span><span class='line'>           // Factory logic goes here...
</span><span class='line'>       }
</span><span class='line'>   }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>DashboardFriendViewHolder</h3>

<p>Using a <em>DashboardFriendViewModel</em>, a <em>DashboardFriendViewHolder</em> (a subclass of <em>RecyclerView.ViewHolder</em>), can simply update the views it holds by getting the fields on the <em>DashboardFriendViewModel</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class DashboardFriendViewHolder(
</span><span class='line'>   parent: ViewGroup
</span><span class='line'>) : RecyclerView.ViewHolder(
</span><span class='line'>    LayoutInflater.from(parent.context).inflate(
</span><span class='line'>        R.layout.item_dashboard_friend, parent, false
</span><span class='line'>    )
</span><span class='line'>) {
</span><span class='line'> 
</span><span class='line'>   var viewModel: DashboardFriendViewModel? = null
</span><span class='line'>       set(value) {
</span><span class='line'>           field = value
</span><span class='line'>           value?.let {
</span><span class='line'>               textViewEmoji.text = it.emoji
</span><span class='line'>               textViewTitle.text = it.title
</span><span class='line'>               textViewSubtitle.text = it.subtitle
</span><span class='line'>               imageViewUnread.visibility = if (hasUnread) View.VISIBLE else View.GONE
</span><span class='line'>           }
</span><span class='line'>       }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>DashboardAdapter</h3>

<p>The backing adapter for the dashboard RecyclerView, <em>DashboardAdapter</em>, holds a list of <em>DashboardFriendViewModel</em> objects and binds each object to a <em>DashboardFriendViewHolder</em> (note that check-ins are excluded in the code sample below).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class DashboardAdapter : 
</span><span class='line'>    RecyclerView.Adapter&lt;DashboardFriendViewHolder&gt;() {
</span><span class='line'>    var friendViewModels: List&lt;DashboardFriendViewModel&gt; = listOf()
</span><span class='line'>        set(value) {
</span><span class='line'>            field = value
</span><span class='line'>            notifyDataSetChanged()
</span><span class='line'>        }
</span><span class='line'>    override fun onBindViewHolder(
</span><span class='line'>        holder: DashboardFriendViewHolder, 
</span><span class='line'>        position: Int
</span><span class='line'>    ) {
</span><span class='line'>        holder.viewModel = friendViewModels[position]
</span><span class='line'>    }
</span><span class='line'>    override fun getItemCount(): Int = friendViewModels.size
</span><span class='line'>    override fun onCreateViewHolder(
</span><span class='line'>        parent: ViewGroup, 
</span><span class='line'>        viewType: Int
</span><span class='line'>    ): DashboardFriendViewHolder {
</span><span class='line'>        return DashboardFriendViewHolder(parent)
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>With these classes in mind, it should be clear that the role of the Activity is to provide the <em>DashboardAdapter</em> a list of <em>DashboardFriendViewModel</em> objects to construct the list of friends in the dashboard view. In the next section, we will look at the reactive elements that come into play to accomplish this.</p>

<h2>Reactive Parts</h2>

<p>Each model that is backed by a SQLite table has a corresponding data access object, or DAO for short, that is in charge of performing CRUD (create, read, update, and delete) operations. The DAO provides the application layer with a higher level abstraction when it needs to access models so that it doesn’t need to know how to perform complex SQLite queries.</p>

<h3>DAO</h3>

<p>DAOs in Pre are also designed to be reactive; that is, DAOs can provide data packaged as an Observable so that the requestor can continue to receive updates as the underlying model changes. The details of how these Observables are constructed will be covered in the 2nd part of this series. For now, assume that we have the following methods provided by <em>FriendDao</em> and <em>MessageDao</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class FriendDao {
</span><span class='line'>    fun getAllFriends(): Observable&lt;List&lt;Friend&gt;&gt; {
</span><span class='line'>        // ...
</span><span class='line'>    }
</span><span class='line'>    fun getFriend(userId: String): Observable&lt;Friend&gt; {
</span><span class='line'>        // ...
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    // more methods here...
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>class MessageDao {
</span><span class='line'> 
</span><span class='line'>    fun getAllMessagesFrom(userId: String): Observable&lt;List&lt;Message&gt;&gt; {
</span><span class='line'>        // ...
</span><span class='line'>    }
</span><span class='line'>    fun getRecentMessageWith(userId: String): Observable&lt;Message&gt; {   
</span><span class='line'>        // ...
</span><span class='line'>    }
</span><span class='line'>    // more methods here...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>It is important to keep in mind that these methods return Observables that report changes to subscribers as the underlying data also changes. For example, if we subscribe to <em>FriendDao#getAllFriends()</em> and, at a later point, a new <em>Friend</em> is added, the observer would receive an updated list of friends via <em>.onNext()</em> once the new friend is persisted in the database. This is really powerful as the mechanism for requesting initial data and for receiving updates will all be in the same place — the observer.</p>

<p>In addition, all methods that return Observables in Pre’s DAOs run off the main thread. It is up to the subscriber to ultimately hop back to the main thread, via <em>.observeOn()</em>, when necessary (e.g. when interacting with the view layer).</p>

<h2>Putting It All Together 🏗</h2>

<p>Using <em>FriendDao</em> and <em>MessageDao</em> that supply us with Observables of <em>Friend</em> and <em>Message</em> objects, respectively, we can now construct the list of DashboardFriendViewModel objects and display our list of friends on the dashboard.</p>

<p>The lines of code that accomplish this are:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>friendDao.getAllFriends()
</span><span class='line'>    .switchMap { friends -&gt;
</span><span class='line'>        val observables = friends.map { friend -&gt;
</span><span class='line'>            messageDao.getRecentMessageWith(friend.userId)
</span><span class='line'>                .map { DashboardFriendViewModel.create(friend, it) }
</span><span class='line'>        }
</span><span class='line'>        Observable.combineLatest(observables) {
</span><span class='line'>            Arrays.copyOf(
</span><span class='line'>                it, 
</span><span class='line'>                it.size,
</span><span class='line'>                Array&lt;DashboardFriendViewModel&gt;::class.java
</span><span class='line'>            ).toList()
</span><span class='line'>        }
</span><span class='line'>    }.observeOn(AndroidSchedulers.mainThread())
</span><span class='line'>     .subscribe { adapter.friendViewModels = it }</span></code></pre></td></tr></table></div></figure>


<p>There’s quite a lot going on here so let’s look at it step-by-step:</p>

<ul>
<li><p>First, we retrieve all friends by calling the .getAllFriends() method on a FriendDao object. As mentioned earlier, this Observable will first emit the list of friends as well as any changes to the user’s friends (i.e. a list of friends will be emitted as new friends are added, or as existing friends are removed/updated)</p></li>
<li><p>Next, we apply a .switchMap() operator which maps the stream from a list of Friend objects to a list of DashboardFriendViewModel objects, the type we are ultimately interested in. We are using .switchMap() here, instead of .flatMap() or .concatMap(), so that only the most recent Observable emission from .switchMap() is observed and all other previous emissions will be considered stale. You can read about the difference between the operators on the ReactiveX wiki.</p></li>
<li><p>Within the .switchMap() operator, we then convert friends into a list of Observable<DashboardFriendViewModel> by iterating through each friend and getting the most recent message with them followed by mapping that to a DashboardFriendViewModel.</p></li>
<li><p>We then combine the emissions of the list of Observable<DashboardFriendViewModel> using the .combineLatest() operator, the result of which is then combined into a list of DashboardFriendViewModel objects which is propagated down to the observer. This operator allows downstream operators and observers to receive updates whenever there is a new message from a friend.</p></li>
<li><p>After the .switchMap() operator, we then chain an .observeOn() operator and make sure that the observer receives events on Android’s main thread.</p></li>
<li><p>Finally, we subscribe to the Observable after applying .switchMap() and set the DashboardAdapter’s friendViewModels to the received emissions. Here, we are replacing the backing data set for the DashboardAdapter, which in turn invokes notifyDataSetChanged(). This can also be optimized by finding the items with changes and selectively applying notifiyItemChanged() or notifyItemRangeChanged().</p></li>
</ul>


<h2>Summary</h2>

<p>The solution above is brief and accomplishes our goal of displaying the dashboard view as well as keeping it up-to-date whenever there is new data. Having a reactive data layer at Pre enables this. By no means is this the only way to compose complex UI. However, I hope this post convinced you that working with Observables makes dealing with data that can come from different sources as well as coordinating concurrency an easier task.</p>

<hr />

<p>Pre is now available in the Google Play Store 🎉 Get it <a href="https://play.google.com/store/apps/details?id=io.tsukemen.zarusoba">here</a>.</p>

<p>Subscribe at the bottom of this site if you want to be notified when the next post in the series goes out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing New Book: Reactive Programming on Android with RxJava]]></title>
    <link href="http://chrisarriola.me/blog/2017/06/12/announcing-new-book-reactive-programming-on-android-with-rxjava/"/>
    <updated>2017-06-12T14:44:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2017/06/12/announcing-new-book-reactive-programming-on-android-with-rxjava</id>
    <content type="html"><![CDATA[<p>I&rsquo;m very pleased to announce that a book that <a href="https://www.linkedin.com/in/ahuang13/">Angus Huang</a> and I started writing a few months back, <a href="https://leanpub.com/reactiveandroid">&ldquo;Reactive Programming on Android with RxJava&rdquo;</a>, is now published and available on LeanPub! 🎉</p>

<p><img class="center" src="http://chrisarriola.me/images/rxjava_my_book_with_angus.jpg"></p>

<h2>What is RxJava?</h2>

<p>RxJava—the Java implementation of ReactiveX—was open sourced and introduced to the developer community by Netflix back in 2013. At Netflix, RxJava had arisen as a need to solve scaling issues created by their previous <a href="https://medium.com/netflix-techblog/embracing-the-differences-inside-the-netflix-api-redesign-15fd8b3dc49d">one-size-fits-all API</a>.</p>

<p>The promise of reactive programming was that it would allow their teams to seamlessly compose complex asynchronous behavior into an easy-to-use API. Using these APIs, their client teams can then create custom end-points to optimize for the growing number of devices that Netflix supported without having to deal with the intricacies of server-side concurrent programming.</p>

<p>In a word, RxJava was supposed to <strong>simplify writing concurrent code</strong>.</p>

<p>Turns out, RxJava did fulfill its promise and is now <a href="https://medium.com/netflix-techblog/reactive-programming-in-the-netflix-api-with-rxjava-7811c3a1496a">the backbone of many Netflix back-end services</a>.</p>

<p>Outside of Netflix, RxJava has been adopted in other communities, including the Android community, as reactive programming can also help with developing mobile apps. As of today, RxJava is the go-to library for enabling reactive programming on Android. Surely, the number of stars it has on Github should be a strong signal.</p>

<p><img class="center" src="http://chrisarriola.me/images/github_rxjava_stars.png" title="RxJava is the most starred Java repository on Github as of June 2017" ></p>

<h2>Why Write a Book?</h2>

<p>We believe that reactive programing is shaping the way Android apps are being built. This is even evident in the direction Google is going with its new reactive-inspired <a href="https://developer.android.com/topic/libraries/architecture/index.html">Android Architecture Components</a> announced recently at Google IO &lsquo;17. With that said, we think it&rsquo;s important for Android developers to familiarize themselves with the reactive programming model.</p>

<p>This book is a collection of our knowledge on the subject taken from different sources around the web (i.e. blog posts, books, wikis, etc.). Our hope is that this book serves as a solid foundation for Android developers who are new to RxJava and want to start integrating it into their apps.</p>

<p>If you are interested in learning more, you can purchase or download a sample of the book <a href="https://leanpub.com/reactiveandroid">here</a>.</p>

<hr />

<p>Got any questions? Leave us a comment below.</p>

<p>Writing apps in Kotlin? Stay tuned for our <a href="https://leanpub.com/reactiveandroidrxkotlin">next book</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive Modelling on Android]]></title>
    <link href="http://chrisarriola.me/blog/2017/03/06/reactive-modelling-on-android/"/>
    <updated>2017-03-06T06:14:25-06:00</updated>
    <id>http://chrisarriola.me/blog/2017/03/06/reactive-modelling-on-android</id>
    <content type="html"><![CDATA[<p><em>This post was originally published on <a href="https://www.toptal.com/android/simplify-concurrency-reactive-modelling-android?utm_source=Android+Weekly&amp;utm_campaign=258130a563-android-weekly-247&amp;utm_medium=email&amp;utm_term=0_4eb677ad19-258130a563-337833853">Toptal</a>.</em></p>

<p>Concurrency and asynchronicity are inherent to mobile programming.</p>

<p>Dealing with concurrency through imperative-style programming, which is what programming on Android generally involves, can be the cause of many problems. Using Reactive Programming with <a href="https://github.com/ReactiveX/RxJava">RxJava</a>, you can avoid potential concurrency problems by providing a cleaner and less error-prone solution.</p>

<p>Aside from simplifying concurrent, asynchronous tasks, RxJava also provides the ability to perform functional style operations that transform, combine, and aggregate emissions from an Observable until we achieve our desired result.</p>

<p><img class="center" src="http://chrisarriola.me/images/rxjava_3os.jpg"></p>

<p>By combining RxJava’s reactive paradigm and functional style operations, we can model a wide range of concurrency constructs in a reactive way, even in Android’s non-reactive world. In this article, you will learn how you can do exactly that. You will also learn how to adopt RxJava into an existing project incrementally.</p>

<p>If you are new to RxJava, I recommend reading the post <a href="https://www.toptal.com/android/functional-reactive-android-rxjava">here</a> which talks about some of the fundamentals of RxJava.</p>

<h2>Bridging Non-Reactive into the Reactive World</h2>

<p>One of the challenges of adding RxJava as one of the libraries to your project is that it fundamentally changes the way that you reason about your code.</p>

<p>RxJava requires you to think about data as being pushed rather than being pulled. While the concept itself is simple, changing a full codebase that is based on a pull paradigm can be a bit daunting. Although consistency is always ideal, you might not always have the privilege to make this transition throughout your entire code base all at once, so more of an incremental approach may be needed.</p>

<p>Consider the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * @return a list of users with blogs
</span><span class='line'> */
</span><span class='line'>public List&lt;User&gt; getUsersWithBlogs() {
</span><span class='line'>   final List&lt;User&gt; allUsers = UserCache.getAllUsers();
</span><span class='line'>   final List&lt;User&gt; usersWithBlogs = new ArrayList&lt;&gt;();
</span><span class='line'>   for (User user : allUsers) {
</span><span class='line'>       if (user.blog != null && !user.blog.isEmpty()) {
</span><span class='line'>           usersWithBlogs.add(user);
</span><span class='line'>       }
</span><span class='line'>   }
</span><span class='line'>   Collections.sort(usersWithBlogs, (user1, user2) -&gt; user1.name.compareTo(user2.name));
</span><span class='line'>   return usersWithBlogs;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This function gets a list of <code>User</code> objects from the cache, filters each one based on whether or not the user has a blog, sorts them by the user’s name, and finally returns them to the caller. Looking at this snippet, we notice that many of these operations can take advantage of RxJava operators; e.g., <code>filter()</code> and <code>sorted()</code>.</p>

<p>Rewriting this snippet then gives us:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * @return a list of users with blogs
</span><span class='line'> */
</span><span class='line'>public Observable&lt;User&gt; getUsersWithBlogs() {
</span><span class='line'>   return Observable.fromIterable(UserCache.getAllUsers())
</span><span class='line'>                    .filter(user -&gt; user.blog != null && !user.blog.isEmpty())
</span><span class='line'>                    .sorted((user1, user2) -&gt; user1.name.compareTo(user2.name));
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The first line of the function converts the <code>List&lt;User&gt;</code> returned by <code>UserCache.getAllUsers()</code> to an <code>Observable&lt;User&gt;</code> via <code>fromIterable()</code>. This is the first step into making our code reactive. Now that we are operating on an <code>Observable</code>, this enables us to perform any <code>Observable</code> operator in the RxJava toolkit – <code>filter()</code> and <code>sorted()</code> in this case.</p>

<p>There are a few other points to note about this change.</p>

<p>First, the method signature is no longer the same. This may not be a huge deal if this method call is only used in a few places and it’s easy to propagate the changes up to other areas of the stack; however, if it breaks clients relying on this method, that is problematic and the method signature should be reverted.</p>

<p>Second, RxJava is designed with laziness in mind. That is, no long operations should be performed when there are no subscribers to the <code>Observable</code>. With this modification, that assumption is no longer true since <code>UserCache.getAllUsers()</code> is invoked even before there are any subscribers.</p>

<h2>Leaving the Reactive World</h2>

<p>To address the first issue from our change, we can make use of any of the blocking operators available to an <code>Observable</code> such as <code>blockingFirst()</code> and <code>blockingNext()</code>. Essentially, both of these operators will block until an item is emitted downstream: <code>blockingFirst()</code> will return the first element emitted and finish, whereas <code>blockingNext()</code> will return an <code>Iterable</code> which allows you to perform a for-each loop on the underlying data (each iteration through the loop will block).</p>

<p>A side-effect of using a blocking operation that is important to be aware of, though, is that exceptions are thrown on the calling thread rather than being passed to an observer’s <code>onError()</code> method.</p>

<p>Using a blocking operator to change the method signature back to a <code>List&lt;User&gt;</code>, our snippet would now look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * @return a list of users with blogs
</span><span class='line'> */
</span><span class='line'>public List&lt;User&gt; getUsersWithBlogs() {
</span><span class='line'>   return Observable.fromIterable(UserCache.getAllUsers())
</span><span class='line'>           .filter(user -&gt; user.blog != null && !user.blog.isEmpty())
</span><span class='line'>           .sorted((user1, user2) -&gt; user1.name.compareTo(user2.name))
</span><span class='line'>           .toList()
</span><span class='line'>           .blockingGet();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Before calling a blocking operator (i.e. <code>blockingGet()</code>) we first need to chain the aggregate operator <code>toList()</code> so that the stream is modified from an <code>Observable&lt;User&gt;</code> to a <code>Single&lt;List&lt;User&gt;&gt;</code> (a Single is a special type of Observable that only emits a single value in <code>onSuccess()</code>, or an error via <code>onError()</code>).</p>

<p>Afterwards, we can call the blocking operator <code>blockingGet()</code> which unwraps the <code>Single</code> and returns a <code>List&lt;User&gt;</code>.</p>

<p>Although RxJava supports this, as much as possible this should be avoided as this is not idiomatic reactive programming. When absolutely necessary though, blocking operators are a nice initial way of stepping out of the reactive world.</p>

<h2>The Lazy Approach</h2>

<p>As mentioned earlier, RxJava was designed with laziness in mind. That is, long-running operations should be delayed as long as possible (i.e., until a subscribe is invoked on an <code>Observable</code>). To make our solution lazy, we make use of the <code>defer()</code> operator.</p>

<p><img class="center" src="http://chrisarriola.me/images/rxjava_defer.jpg"></p>

<p><code>defer()</code> takes in an <code>ObservableSource</code> factory which creates an <code>Observable</code> for each new observer that subscribes. In our case, we want to return <code>Observable.fromIterable(UserCache.getAllUser())</code> whenever an observer subscribes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * @return a list of users with blogs
</span><span class='line'> */
</span><span class='line'>public Observable&lt;User&gt; getUsersWithBlogs() {
</span><span class='line'>   return Observable.defer(() -&gt; Observable.fromIterable(UserCache.getAllUsers()))
</span><span class='line'>                    .filter(user -&gt; user.blog != null && !user.blog.isEmpty())
</span><span class='line'>                    .sorted((user1, user2) -&gt; user1.name.compareTo(user2.name));
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now that the long running operation is wrapped in a <code>defer()</code>, we have full control as to what thread this should run in simply by specifying the appropriate <code>Scheduler</code> in <code>subscribeOn()</code>. With this change, our code is fully reactive and subscription should only occur at the moment the data is needed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * @return a list of users with blogs
</span><span class='line'> */
</span><span class='line'>public Observable&lt;User&gt; getUsersWithBlogs() {
</span><span class='line'>   return Observable.defer(() -&gt; Observable.fromIterable(UserCache.getAllUsers()))
</span><span class='line'>                    .filter(user -&gt; user.blog != null && !user.blog.isEmpty())
</span><span class='line'>                    .sorted((user1, user2) -&gt; user1.name.compareTo(user2.name))
</span><span class='line'>                    .subscribeOn(Schedulers.io());
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Another quite useful operator for deferring computation is the <code>fromCallable()</code> method. Unlike <code>defer()</code>, which expects an Observable to be returned in the lambda function and in turn “flattens” the returned <code>Observable</code>, <code>fromCallable()</code> will invoke the lambda and return the value downstream.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * @return a list of users with blogs
</span><span class='line'> */
</span><span class='line'>public Observable&lt;User&gt; getUsersWithBlogs() {
</span><span class='line'>   final Observable&lt;List&lt;User&gt;&gt; usersObservable = Observable.fromCallable(() -&gt; UserCache.getAllUsers());
</span><span class='line'>   final Observable&lt;User&gt; userObservable = usersObservable.flatMap(users -&gt; Observable.fromIterable(users));
</span><span class='line'>   return userObservable.filter(user -&gt; user.blog != null && !user.blog.isEmpty())
</span><span class='line'>                        .sorted((user1, user2) -&gt; user1.name.compareTo(user2.name));
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Single using <code>fromCallable()</code> on a list would now return an <code>Observable&lt;List&lt;User&gt;&gt;</code>, we need to flatten this list using <code>flatMap()</code>.</p>

<h2>Reactive-everything</h2>

<p>From the previous examples, we have seen that we can wrap any object in an <code>Observable</code> and jump between non-reactive and reactive states using blocking operations and <code>defer()</code>/<code>fromCallable()</code>. Using these constructs, we can start converting areas of an Android app to be reactive.</p>

<h3>Long Operations</h3>

<p>A good place to initially think of using RxJava is whenever you have a process that takes a while to perform, such as network calls (check out <a href="https://www.toptal.com/android/functional-reactive-android-rxjava">previous post</a> for examples), disk reads and writes, etc. The following example illustrates a simple function that will write text to the file system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Writes {@code text} to the file system.
</span><span class='line'> *
</span><span class='line'> * @param context a Context
</span><span class='line'> * @param filename the name of the file
</span><span class='line'> * @param text the text to write
</span><span class='line'> * @return true if the text was successfully written, otherwise, false
</span><span class='line'> */
</span><span class='line'>public boolean writeTextToFile(Context context, String filename, String text) {
</span><span class='line'>   FileOutputStream outputStream;
</span><span class='line'>   try {
</span><span class='line'>       outputStream = context.openFileOutput(filename, Context.MODE_PRIVATE);
</span><span class='line'>       outputStream.write(text.getBytes());
</span><span class='line'>       outputStream.close();
</span><span class='line'>       return true;
</span><span class='line'>   } catch (Exception e) {
</span><span class='line'>       e.printStackTrace();
</span><span class='line'>       return false;
</span><span class='line'>   }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>When calling this function, we need to make sure that it is done on a separate thread since this operation is blocking. Imposing such a restriction on the caller complicates things for the developer which increases the likelihood of bugs and can potentially slow down development.</p>

<p>Adding a comment to the function will of course help avoid errors by the caller, but that is still far from bulletproof.</p>

<p>Using RxJava, however, we can easily wrap this into an <code>Observable</code> and specify the <code>Scheduler</code> that it should run on. This way, the caller doesn’t need to be concerned at all with invoking the function in a separate thread; the function will take care of this itself.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Writes {@code text} to the filesystem.
</span><span class='line'> *
</span><span class='line'> * @param context a Context
</span><span class='line'> * @param filename the name of the file
</span><span class='line'> * @param text the text to write
</span><span class='line'> * @return An Observable emitting a boolean indicating whether or not the text was successfully written.
</span><span class='line'> */
</span><span class='line'>public Observable&lt;Boolean&gt; writeTextToFile(Context context, String filename, String text) {
</span><span class='line'>   return Observable.fromCallable(() -&gt; {
</span><span class='line'>       FileOutputStream outputStream;
</span><span class='line'>       outputStream = context.openFileOutput(filename, Context.MODE_PRIVATE);
</span><span class='line'>       outputStream.write(text.getBytes());
</span><span class='line'>       outputStream.close();
</span><span class='line'>       return true;
</span><span class='line'>   }).subscribeOn(Schedulers.io());
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Using <code>fromCallable()</code>, writing the text to file is deferred up until subscription time.</p>

<p>Since exceptions are first-class objects in RxJava, one other benefit of our change is that the we no longer need to wrap the operation in a try/catch block. The exception will simply be propagated downstream rather than being swallowed. This allows the caller to handle the exception a he/she sees fit (e.g. show an error to the user depending on what exception was thrown, etc.).</p>

<p>One other optimization we can perform is to return a <code>Completable</code> rather than an <code>Observable</code>. A <code>Completable</code> is essentially a special type of <code>Observable</code> — similar to a <code>Single</code> — that simply indicates if a computation succeeded, via <code>onComplete()</code>, or failed, via <code>onError()</code>. Returning a <code>Completable</code> seems to make more sense in this case since it seems silly to return a single true in an <code>Observable</code> stream.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Writes {@code text} to the filesystem.
</span><span class='line'> *
</span><span class='line'> * @param context a context
</span><span class='line'> * @param filename the name of the file
</span><span class='line'> * @param text the text to write
</span><span class='line'> * @return A Completable
</span><span class='line'> */
</span><span class='line'>public Completable writeTextToFile(Context context, String filename, String text) {
</span><span class='line'>   return Completable.fromAction(() -&gt; {
</span><span class='line'>       FileOutputStream outputStream;
</span><span class='line'>       outputStream = context.openFileOutput(filename, Context.MODE_PRIVATE);
</span><span class='line'>       outputStream.write(text.getBytes());
</span><span class='line'>       outputStream.close();
</span><span class='line'>   }).subscribeOn(Schedulers.io());
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>To complete the operation, we use the <code>fromAction()</code> operation of a <code>Completable</code> since the return value is no longer of interest to us. If needed, like an <code>Observable</code>, a <code>Completable</code> also supports the <code>fromCallable()</code> and <code>defer()</code> functions.</p>

<h3>Replacing Callbacks</h3>

<p>So far, all the examples that we’ve looked at emit either one value (i.e., can be modelled as a <code>Single</code>), or tell us if an operation succeeded or failed (i.e., can be modelled as a <code>Completable</code>).</p>

<p>How might we convert areas in our app, though, that receive continuous updates or events (such as location updates, view click events, sensor events, and so on)?</p>

<p>We will look at two ways to do this, using <code>create()</code> and using <code>Subjects</code>.</p>

<p><code>create()</code> allows us to explicitly invoke an observer’s <code>onNext()</code>|<code>onComplete()</code>|<code>onError()</code> method as we receive updates from our data source. To use <code>create()</code>, we pass in an <code>ObservableOnSubscribe</code> which receives an <code>ObservableEmitter</code> whenever an observer subscribes. Using the received emitter, we can then perform all the necessary set-up calls to start receiving updates and then invoke the appropriate <code>Emitter</code> event.</p>

<p>In the case of location updates, we can register to receive updates in this place and emit location updates as received.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class LocationManager {
</span><span class='line'>
</span><span class='line'>   /**
</span><span class='line'>    * Call to receive device location updates.
</span><span class='line'>    * @return An Observable emitting location updates
</span><span class='line'>    */
</span><span class='line'>   public Observable&lt;Location&gt; observeLocation() {
</span><span class='line'>       return Observable.create(emitter -&gt; {
</span><span class='line'>           // Make sure that the following conditions apply and if not, call the emitter's onError() method
</span><span class='line'>           // (1) googleApiClient is connected
</span><span class='line'>           // (2) location permission is granted
</span><span class='line'>           final LocationRequest locationRequest = new LocationRequest();
</span><span class='line'>           locationRequest.setInterval(1000);
</span><span class='line'>           locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
</span><span class='line'>
</span><span class='line'>           LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, new LocationListener() {
</span><span class='line'>               @Override public void onLocationChanged(Location location) {
</span><span class='line'>                   if (!emitter.isDisposed()) {
</span><span class='line'>                       emitter.onNext(location);
</span><span class='line'>                   }
</span><span class='line'>               }
</span><span class='line'>           });
</span><span class='line'>       });
</span><span class='line'>   }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The function inside the <code>create()</code> call requests location updates and passes in a callback that gets invoked when the device’s location changes. As we can see here, we essentially replace the callback-style interface and instead emit the received location in the created Observable stream (for the sake of educational purposes, I skipped some of the details with constructing a location request, if you want to delve deeper into the details you can read it <a href="https://developer.android.com/training/location/receive-location-updates.html">here</a>).</p>

<p>One other thing to note about <code>create()</code> is that, whenever <code>subscribe()</code> is called, a new emitter is provided. In other words, <code>create()</code> returns a <a href="https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339">cold Observable</a>. This means that, in the function above, we would potentially be requesting location updates multiple times, which is not what we want.</p>

<p>To work around this, we want to change the the function to return a hot <code>Observable</code> with the help of <code>Subjects</code>.</p>

<h3>Enter Subjects</h3>

<p>A <code>Subject</code> extends an <code>Observable</code> and implements <code>Observer</code> at the same time. This is particularly useful whenever we want to emit or cast the same event to multiple subscribers at the same time. Implementation-wise, we would want to expose the <code>Subject</code> as an <code>Observable</code> to clients, while keeping it as a <code>Subject</code> for the provider.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class LocationManager {
</span><span class='line'>
</span><span class='line'>   private Subject&lt;Location&gt; locationSubject = PublishSubject.create();
</span><span class='line'>   
</span><span class='line'>   /**
</span><span class='line'>    * Invoke this method when this LocationManager should start listening to location updates.
</span><span class='line'>    */
</span><span class='line'>   public void connect() {
</span><span class='line'>       final LocationRequest locationRequest = new LocationRequest();
</span><span class='line'>       locationRequest.setInterval(1000);
</span><span class='line'>       locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
</span><span class='line'>
</span><span class='line'>       LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, new LocationListener() {
</span><span class='line'>           @Override public void onLocationChanged(Location location) {
</span><span class='line'>               locationSubject.onNext(location);
</span><span class='line'>           }
</span><span class='line'>       });
</span><span class='line'>   }
</span><span class='line'>   
</span><span class='line'>   /**
</span><span class='line'>    * Call to receive device location updates.
</span><span class='line'>    * @return An Observable emitting location updates
</span><span class='line'>    */
</span><span class='line'>   public Observable&lt;Location&gt; observeLocation() {
</span><span class='line'>       return locationSubject;
</span><span class='line'>   }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In this new implementation, the subtype <code>PublishSubject</code> is used which emits events as they arrive starting from the time of subscription. Accordingly, if a subscription is performed at a point when location updates have already been emitted, past emissions will not be received by the observer, only subsequent ones. If this behavior is not desired, there are a couple of other <code>Subject</code> subtypes in the RxJava toolkit that can be <a href="http://reactivex.io/documentation/subject.html">used</a>.</p>

<p><img class="center" src="http://chrisarriola.me/images/rxjava_publish_subject.jpg"></p>

<p>In addition, we also created a separate <code>connect()</code> function which starts the request to receive location updates. The <code>observeLocation()</code> can still do the <code>connect()</code> call, but we refactored it out of the function for clarity/simplicity.</p>

<h2>Summary</h2>

<p>We’ve looked at a number of mechanisms and techniques:</p>

<ul>
<li><code>defer()</code> and its variants to delay execution of a computation until subscription</li>
<li>cold <code>Observables</code> generated through <code>create()</code></li>
<li>hot <code>Observables</code> using <code>Subjects</code></li>
<li><code>blockingX()</code> operations when we want to leave the reactive world</li>
</ul>


<p>Hopefully, the examples provided in this article inspired some ideas regarding different areas in your app that can be converted to be reactive. We’ve covered a lot and if you have any questions, suggestions, or if anything is not clear, feel free to leave a comment below!</p>

<p>If you are interested in learning more about RxJava, I am working on an in-depth book that explains how to view problems the reactive way using Android examples. If you’d like to receive updates on it, please subscribe <a href="https://leanpub.com/reactiveandroid">here</a>.</p>

<p><img class="center" src="http://chrisarriola.me/images/rxjava_my_book.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to RxJava for Android]]></title>
    <link href="http://chrisarriola.me/blog/2016/09/04/introduction-to-rxjava-for-android/"/>
    <updated>2016-09-04T02:52:08-05:00</updated>
    <id>http://chrisarriola.me/blog/2016/09/04/introduction-to-rxjava-for-android</id>
    <content type="html"><![CDATA[<p><em>This post was originally published on <a href="https://www.toptal.com/android/functional-reactive-android-rxjava">Toptal</a> under my Toptal <a href="https://www.toptal.com/resume/christopher-arriola">account</a>.</em></p>

<p>If you’re an Android developer, chances are you’ve heard of <a href="https://github.com/ReactiveX/RxJava">RxJava</a>. It’s one of the most discussed libraries for enabling Reactive Programming in Android development. It’s touted as the go-to framework for simplifying concurrency/asynchronous tasks inherent in mobile programming.</p>

<p>But… what is RxJava and how does it “simplify” things?</p>

<p><img class="center" src="http://chrisarriola.me/images/rxjava_ooo.jpg"></p>

<p>While there are lots of resources already available online explaining what RxJava is, in this article my goal is to give you a basic introduction to RxJava and specifically how it fits into Android development. I’ll also give some concrete examples and suggestions on how you can integrate it in a new or existing project.</p>

<h1>Why Consider RxJava</h1>

<p>At its core, RxJava simplifies development because it <a href="http://reactivex.io/intro.html">raises the level of abstraction</a> around threading. That is, as a developer you don’t have to worry too much about the details of how to perform operations that should occur on different threads. This is particularly attractive since threading is challenging to get right and, if not correctly implemented, can cause some of the most difficult bugs to debug and fix.</p>

<p>Granted, this doesn’t mean RxJava is bulletproof when it comes to threading and it is still important to understand what’s happening behind the scenes; however, RxJava can definitely make your life easier.</p>

<p>Let’s look at an example.</p>

<h2>Network Call &ndash; RxJava vs AsyncTask</h2>

<p>Say we want to obtain data over the network and update the UI as a result. One way to do this is to (1) create an inner <code>AsyncTask</code> subclass in our <code>Activity</code>/<code>Fragment</code>, (2) perform the network operation in the background, and (3) take the result of that operation and update the UI in the main thread.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class NetworkRequestTask extends AsyncTask&lt;Void, Void, User&gt; {
</span><span class='line'>
</span><span class='line'>    private final int userId;
</span><span class='line'>
</span><span class='line'>    public NetworkRequestTask(int userId) {
</span><span class='line'>        this.userId = userId;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override protected User doInBackground(Void... params) {
</span><span class='line'>        return networkService.getUser(userId);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override protected void onPostExecute(User user) {
</span><span class='line'>        nameTextView.setText(user.getName());
</span><span class='line'>        // ...set other views
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>private void onButtonClicked(Button button) {
</span><span class='line'>   new NetworkRequestTask(123).execute()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Harmless as this may seem, this approach has some issues and limitations. Namely, memory/context leaks are easily created since <code>NetworkRequestTask</code> is an inner class and thus holds an implicit reference to the outer class. Also, what if we want to chain another long operation after the network call? We’d have to nest two <code>AsyncTask</code>s which can significantly reduce readability.</p>

<p>In contrast, an RxJava approach to performing a network call might look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private Subscription subscription;
</span><span class='line'>
</span><span class='line'>private void onButtonClicked(Button button) {
</span><span class='line'>   subscription = networkService.getObservableUser(123)
</span><span class='line'>                 .subscribeOn(Schedulers.io())
</span><span class='line'>                 .observeOn(AndroidSchedulers.mainThread())
</span><span class='line'>                 .subscribe(new Action1&lt;User&gt;() {
</span><span class='line'>                     @Override public void call(User user) {
</span><span class='line'>                         nameTextView.setText(user.getName());
</span><span class='line'>                         // ... set other views
</span><span class='line'>                     }
</span><span class='line'>                 });
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@Override protected void onDestroy() {
</span><span class='line'>   if (subscription != null && !subscription.isUnsubscribed()) {
</span><span class='line'>       subscription.unsubscribe();
</span><span class='line'>   }
</span><span class='line'>   super.onDestroy();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Using this approach, we solve the problem (of potential memory leaks caused by a running thread holding a reference to the outer context) by keeping a reference to the returned <code>Subscription</code> object. This <code>Subscription</code> object is then tied to the <code>Activity</code>/<code>Fragment</code> object’s <code>#onDestroy()</code> method to guarantee that the <code>Action1#call</code> operation does not execute when the <code>Activity</code>/<code>Fragment</code> needs to be destroyed.</p>

<p>Also, notice that that the return type of <code>#getObservableUser(...)</code> (i.e. an <code>Observable&lt;User&gt;</code>) is chained with further calls to it. Through this fluid API, we’re able to solve the second issue of using an <code>AsyncTask</code> which is that it allows further network call/long operation chaining. Pretty neat, huh?</p>

<p>Let’s dive deeper into some RxJava concepts.</p>

<h1>Observable, Observer, and Operator &ndash; The 3 O’s of RxJava Core</h1>

<p>In the RxJava world, everything can be modeled as streams. A stream emits item(s) over time, and each emission can be consumed/observed.</p>

<p>If you think about it, a stream is not a new concept: click events can be a stream, location updates can be a stream, push notifications can be a stream, and so on.</p>

<p><img class="center" src="http://chrisarriola.me/images/rxjava_animation.gif"></p>

<p>The stream abstraction is implemented through 3 core constructs which I like to call “the 3 O’s”; namely: the <strong>O</strong>bservable, <strong>O</strong>bserver, and the <strong>O</strong>perator. The <strong>Observable</strong> emits items (the stream); and the <strong>Observer</strong> consumes those items. Emissions from Observable objects can further be modified, transformed, and manipulated by chaining <strong>Operator</strong> calls.</p>

<h2>Observable</h2>

<p>An Observable is the stream abstraction in RxJava. It is similar to an <strong>Iterator</strong> in that, given a sequence, it iterates through and produces those items in an orderly fashion. A consumer can then consume those items through the same interface, regardless of the underlying sequence.</p>

<p>Say we wanted to emit the numbers 1, 2, 3, in that order. To do so, we can use the <code>Observable&lt;T&gt;#create(OnSubscribe&lt;T&gt;)</code> method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Observable&lt;Integer&gt; observable = Observable.create(new Observable.OnSubscribe&lt;Integer&gt;() {
</span><span class='line'>   @Override public void call(Subscriber&lt;? super Integer&gt; subscriber) {
</span><span class='line'>       subscriber.onNext(1);
</span><span class='line'>       subscriber.onNext(2);
</span><span class='line'>       subscriber.onNext(3);
</span><span class='line'>       subscriber.onCompleted();
</span><span class='line'>   }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Invoking <code>subscriber.onNext(Integer)</code> emits an item in the stream and, when the stream is finished emitting, <code>subscriber.onCompleted()</code> is then invoked.</p>

<p>This approach to creating an Observable is fairly verbose. For this reason, there are convenience methods for creating Observable instances which should be preferred in almost all cases.</p>

<p>The simplest way to create an Observable is using <code>Observable#just(...)</code>. As the method name suggests, it just emits the item(s) that you pass into it as method arguments.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Observable.just(1, 2, 3); // 1, 2, 3 will be emitted, respectively</span></code></pre></td></tr></table></div></figure>


<h2>Observer</h2>

<p>The next component to the Observable stream is the Observer (or Observers) subscribed to it. Observers are notified whenever something “interesting” happens in the stream. Observers are notified via the following events:</p>

<ul>
<li><code>Observer#onNext(T)</code> &ndash; invoked when an item is emitted from the stream</li>
<li><code>Observable#onError(Throwable)</code> &ndash; invoked when an error has occurred within the stream</li>
<li><code>Observable#onCompleted()</code> &ndash; invoked when the stream is finished emitting items.</li>
</ul>


<p>To subscribe to a stream, simply call Observable<T>#subscribe(&hellip;) and pass in an Observer instance.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Observable&lt;Integer&gt; observable = Observable.just(1, 2, 3);
</span><span class='line'>observable.subscribe(new Observer&lt;Integer&gt;() {
</span><span class='line'>   @Override public void onCompleted() {
</span><span class='line'>       Log.d("Test", "In onCompleted()");
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   @Override public void onError(Throwable e) {
</span><span class='line'>       Log.d("Test", "In onError()");
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   @Override public void onNext(Integer integer) {
</span><span class='line'>       Log.d("Test", "In onNext():" + integer);
</span><span class='line'>   }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>The above code will emit the following in Logcat:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>In onNext(): 1
</span><span class='line'>In onNext(): 2
</span><span class='line'>In onNext(): 3
</span><span class='line'>In onNext(): 4
</span><span class='line'>In onCompleted()</span></code></pre></td></tr></table></div></figure>


<p>There may also be some instances where we are no longer interested in the emissions of an Observable. This is particularly relevant in Android when, for example, an <code>Activity</code>/<code>Fragment</code> needs to be reclaimed in memory.</p>

<p>To stop observing items, we simply need to call <code>Subscription#unsubscribe()</code> on the returned Subscription object.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Subscription subscription = someInfiniteObservable.subscribe(new Observer&lt;Integer&gt;() {
</span><span class='line'>   @Override public void onCompleted() {
</span><span class='line'>       // ...
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   @Override public void onError(Throwable e) {
</span><span class='line'>       // ...
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   @Override public void onNext(Integer integer) {
</span><span class='line'>       // ...
</span><span class='line'>   }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>// Call unsubscribe when appropriate
</span><span class='line'>subscription.unsubscribe();</span></code></pre></td></tr></table></div></figure>


<p>As seen in the code snippet above, upon subscribing to an Observable, we hold the reference to the returned Subscription object and later invoke <code>subscription#unsubscribe()</code> when necessary. In Android, this is best invoked within <code>Activity#onDestroy()</code> or <code>Fragment#onDestroy()</code>.</p>

<h2>Operator</h2>

<p>Items emitted by an Observable can be transformed, modified, and filtered through Operators before notifying the subscribed Observer object(s). Some of the most common operations found in functional programming (such as map, filter, reduce, etc.) can also be applied to an Observable stream. Let’s look at map as an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Observable.just(1, 2, 3, 4, 5).map(new Func1&lt;Integer, Integer&gt;() {
</span><span class='line'>   @Override public Integer call(Integer integer) {
</span><span class='line'>       return integer * 2;
</span><span class='line'>   }
</span><span class='line'>}).subscribe(new Observer&lt;Integer&gt;() {
</span><span class='line'>   @Override public void onCompleted() {
</span><span class='line'>       // ...
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   @Override public void onError(Throwable e) {
</span><span class='line'>       // ...
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   @Override public void onNext(Integer integer) {
</span><span class='line'>       // ...
</span><span class='line'>   }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>The code snippet above would take each emission from the Observable and multiply each by 2, producing the stream 2, 4, 6, 8, 10, respectively. Applying an Operator typically returns another Observable as a result, which is convenient as this allows us to chain multiple operations to obtain a desired result.</p>

<p>Given the stream above, say we wanted to only receive even numbers. This can be achieved by chaining a <em>filter</em> operation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Observable.just(1, 2, 3, 4, 5).map(new Func1&lt;Integer, Integer&gt;() {
</span><span class='line'>   @Override public Integer call(Integer integer) {
</span><span class='line'>       return integer * 2;
</span><span class='line'>   }
</span><span class='line'>}).filter(new Func1&lt;Integer, Boolean&gt;() {
</span><span class='line'>   @Override public Boolean call(Integer integer) {
</span><span class='line'>       return integer % 2 == 0;
</span><span class='line'>   }
</span><span class='line'>}).subscribe(new Observer&lt;Integer&gt;() {
</span><span class='line'>   @Override public void onCompleted() {
</span><span class='line'>       // ...
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   @Override public void onError(Throwable e) {
</span><span class='line'>       // ...
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   @Override public void onNext(Integer integer) {
</span><span class='line'>       // ...
</span><span class='line'>   }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>There are <a href="http://reactivex.io/documentation/operators.html#alphabetical">many operators built-in the RxJava</a> toolset that modify the Observable stream; if you can think of a way to modify the stream, chances are, there’s an Operator for it. Unlike most technical documentation, reading the RxJava/ReactiveX docs is fairly simple and to-the-point. Each operator in the documentation comes along with a visualization on how the Operator affects the stream. These visualizations are called “marble diagrams.”</p>

<p>Here’s how a hypothetical Operator called flip might be modeled through a marble diagram:</p>

<p><img src="http://chrisarriola.me/images/rxjava_flip.png"></p>

<h1>Multithreading with RxJava</h1>

<p>Controlling the thread within which operations occur in the Observable chain is done by specifying the <a href="http://reactivex.io/documentation/scheduler.html">Scheduler</a> within which an operator should occur. Essentially, you can think of a Scheduler as a thread pool that, when specified, an operator will use and run on. By default, if no such Scheduler is provided, the Observable chain will operate on the same thread where <code>Observable#subscribe(...)</code> is called. Otherwise, a Scheduler can be specified via <code>Observable#subscribeOn(Scheduler)</code> and/or <code>Observable#observeOn(Scheduler)</code> wherein the scheduled operation will occur on a thread chosen by the Scheduler.</p>

<p>The key difference between the two methods is that <code>Observable#subscribeOn(Scheduler)</code> instructs the source Observable which Scheduler it should run on. The chain will continue to run on the thread from the Scheduler specified in <code>Observable#subscribeOn(Scheduler)</code> until a call to <code>Observable#observeOn(Scheduler)</code> is made with a different Scheduler. When such a call is made, all observers from there on out (i.e., subsequent operations down the chain) will receive notifications in a thread taken from the observeOn Scheduler.</p>

<p>Here’s a marble diagram that demonstrates how these methods affect where operations are run:</p>

<p><img src="http://chrisarriola.me/images/rxjava_schedulers.png"></p>

<p>In the context of Android, if a UI operation needs to take place as a result of a long operation, we’d want that operation to take place on the UI thread. For this purpose, we can use <code>AndroidScheduler#mainThread()</code>, one of the Schedulers provided in the <a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a> library.</p>

<h1>RxJava on Android</h1>

<p>Now that we’ve got some of the basics under our belt, you might be wondering — what’s the best way to integrate RxJava in an <a href="https://www.toptal.com/android">Android</a> application? As you might imagine, there are many use cases for RxJava but, in this example, let’s take a look at one specific case: using Observable objects as part of the network stack.</p>

<p>In this example, we will look at <a href="http://square.github.io/retrofit/">Retrofit</a>, an HTTP client open sourced by Square which has built-in bindings with RxJava to interact with GitHub’s API. Specifically, we’ll create a simple app that presents all the starred repositories for a user given a GitHub username. If you want to jump ahead, the source code is available <a href="https://github.com/arriolac/GitHubRxJava">here</a>.</p>

<h2>Create a New Android Project</h2>

<ul>
<li>Start by creating a new Android project and naming it <strong>GitHubRxJava</strong>.</li>
</ul>


<p><img src="http://chrisarriola.me/images/rxjava_setup1.png"></p>

<ul>
<li>In the <strong>Target Android Devices</strong> screen, keep <strong>Phone and Tablet</strong> selected and set the minimum SDK level of 17. Feel free to set it to a lower/higher API level but, for this example, API level 17 will suffice.</li>
</ul>


<p><img src="http://chrisarriola.me/images/rxjava_setup2.png"></p>

<ul>
<li>Select <strong>Empty Activity</strong> in the next prompt.</li>
</ul>


<p><img src="http://chrisarriola.me/images/rxjava_setup3.png"></p>

<ul>
<li>In the last step, keep the Activity Name as <strong>MainActivity</strong> and generate a layout file <strong>activity_main</strong>.</li>
</ul>


<p><img src="http://chrisarriola.me/images/rxjava_setup4.png"></p>

<h2>Project Set-Up</h2>

<p>Include <a href="https://github.com/ReactiveX/RxJava">RxJava</a>, <a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a>, and the <a href="http://square.github.io/retrofit/">Retrofit</a> library in <code>app/build.gradle</code>. Note that including RxAndroid implicitly also includes RxJava. It is best practice, however, to always include those two libraries explicitly since RxAndroid does not always contain the most up-to-date version of RxJava. Explicitly including the latest version of RxJava guarantees use of the most up-to-date version.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
</span><span class='line'>    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
</span><span class='line'>    compile 'com.squareup.retrofit2:retrofit:2.1.0'
</span><span class='line'>    compile 'io.reactivex:rxandroid:1.2.0'
</span><span class='line'>    compile 'io.reactivex:rxjava:1.1.8'
</span><span class='line'>    // ...other dependencies
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Create Data Object</h2>

<p>Create the <code>GitHubRepo</code> data object class. This class encapsulates a repository in GitHub (the network response contains more data but we’re only interested in a subset of that).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class GitHubRepo {
</span><span class='line'>
</span><span class='line'>    public final int id;
</span><span class='line'>    public final String name;
</span><span class='line'>    public final String htmlUrl;
</span><span class='line'>    public final String description;
</span><span class='line'>    public final String language;
</span><span class='line'>    public final int stargazersCount;
</span><span class='line'>
</span><span class='line'>    public GitHubRepo(int id, String name, String htmlUrl, String description, String language, int stargazersCount) {
</span><span class='line'>        this.id = id;
</span><span class='line'>        this.name = name;
</span><span class='line'>        this.htmlUrl = htmlUrl;
</span><span class='line'>        this.description = description;
</span><span class='line'>        this.language = language;
</span><span class='line'>        this.stargazersCount = stargazersCount;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Set-Up Retrofit</h2>

<ul>
<li>Create the <code>GitHubService</code> interface. We will pass this interface into Retrofit and Retrofit will create an implementation of <code>GitHubService</code>.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface GitHubService {
</span><span class='line'>    @GET("users/{user}/starred") Observable&lt;List&lt;GitHubRepo&gt;&gt; getStarredRepositories(@Path("user") String userName);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create the <code>GitHubClient</code> class. This will be the object we will interact with to make network calls from the UI level.

<ul>
<li> When constructing an implementation of <code>GitHubService</code> through Retrofit, we need to pass in an <code>RxJavaCallAdapterFactory</code> as the call adapter so that network calls can return Observable objects (passing a call adapter is needed for any network call that returns a result other than a <code>Call</code>).</li>
<li>We also need to pass in a <code>GsonConverterFactory</code> so that we can use <a href="https://github.com/google/gson">Gson</a> as a way to marshal JSON objects to Java objects.</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class GitHubClient {
</span><span class='line'>
</span><span class='line'>    private static final String GITHUB_BASE_URL = "https://api.github.com/";
</span><span class='line'>
</span><span class='line'>    private static GitHubClient instance;
</span><span class='line'>    private GitHubService gitHubService;
</span><span class='line'>
</span><span class='line'>    private GitHubClient() {
</span><span class='line'>        final Gson gson =
</span><span class='line'>            new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
</span><span class='line'>        final Retrofit retrofit = new Retrofit.Builder().baseUrl(GITHUB_BASE_URL)
</span><span class='line'>                                                        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
</span><span class='line'>                                                        .addConverterFactory(GsonConverterFactory.create(gson))
</span><span class='line'>                                                        .build();
</span><span class='line'>        gitHubService = retrofit.create(GitHubService.class);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public static GitHubClient getInstance() {
</span><span class='line'>        if (instance == null) {
</span><span class='line'>            instance = new GitHubClient();
</span><span class='line'>        }
</span><span class='line'>        return instance;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public Observable&lt;List&lt;GitHubRepo&gt;&gt; getStarredRepos(@NonNull String userName) {
</span><span class='line'>        return gitHubService.getStarredRepositories(userName);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Set-Up Layouts</h2>

<p>Next, create a simple UI that displays the retrieved repos given an input GitHub username. Create <code>activity_home.xml</code> &ndash; the layout for our activity &ndash; with something like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;LinearLayout
</span><span class='line'>    xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"
</span><span class='line'>    android:orientation="vertical"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;ListView
</span><span class='line'>        android:id="@+id/list_view_repos"
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="0dp"
</span><span class='line'>        android:layout_weight="1"/&gt;
</span><span class='line'>
</span><span class='line'>    &lt;LinearLayout
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:orientation="horizontal"&gt;
</span><span class='line'>
</span><span class='line'>        &lt;EditText
</span><span class='line'>            android:id="@+id/edit_text_username"
</span><span class='line'>            android:layout_width="0dp"
</span><span class='line'>            android:layout_height="wrap_content"
</span><span class='line'>            android:layout_weight="1"
</span><span class='line'>            android:hint="@string/username"/&gt;
</span><span class='line'>
</span><span class='line'>        &lt;Button
</span><span class='line'>            android:id="@+id/button_search"
</span><span class='line'>            android:layout_width="wrap_content"
</span><span class='line'>            android:layout_height="wrap_content"
</span><span class='line'>            android:text="@string/search"/&gt;
</span><span class='line'>
</span><span class='line'>    &lt;/LinearLayout&gt;
</span><span class='line'>
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>Create <code>item_github_repo.xml</code> &ndash; the <code>ListView</code> item layout for GitHub repository object &ndash; with something like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;RelativeLayout
</span><span class='line'>    xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    xmlns:tools="http://schemas.android.com/tools"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"
</span><span class='line'>    android:padding="6dp"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;TextView
</span><span class='line'>        android:id="@+id/text_repo_name"
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:textSize="24sp"
</span><span class='line'>        android:textStyle="bold"
</span><span class='line'>        tools:text="Cropper"/&gt;
</span><span class='line'>
</span><span class='line'>    &lt;TextView
</span><span class='line'>        android:id="@+id/text_repo_description"
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:lines="2"
</span><span class='line'>        android:ellipsize="end"
</span><span class='line'>        android:textSize="16sp"
</span><span class='line'>        android:layout_below="@+id/text_repo_name"
</span><span class='line'>        tools:text="Android widget for cropping and rotating an image."/&gt;
</span><span class='line'>
</span><span class='line'>    &lt;TextView
</span><span class='line'>        android:id="@+id/text_language"
</span><span class='line'>        android:layout_width="wrap_content"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:layout_below="@+id/text_repo_description"
</span><span class='line'>        android:layout_alignParentLeft="true"
</span><span class='line'>        android:textColor="?attr/colorPrimary"
</span><span class='line'>        android:textSize="14sp"
</span><span class='line'>        android:textStyle="bold"
</span><span class='line'>        tools:text="Language: Java"/&gt;
</span><span class='line'>
</span><span class='line'>    &lt;TextView
</span><span class='line'>        android:id="@+id/text_stars"
</span><span class='line'>        android:layout_width="wrap_content"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:layout_below="@+id/text_repo_description"
</span><span class='line'>        android:layout_alignParentRight="true"
</span><span class='line'>        android:textColor="?attr/colorAccent"
</span><span class='line'>        android:textSize="14sp"
</span><span class='line'>        android:textStyle="bold"
</span><span class='line'>        tools:text="Stars: 1953"/&gt;
</span><span class='line'>
</span><span class='line'>&lt;/RelativeLayout&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Glue Everything Together</h2>

<p>Create a <code>ListAdapter</code> that is in charge of binding <code>GitHubRepo</code> objects into <code>ListView</code> items. The process essentially involves inflating <code>item_github_repo.xml</code> into a <code>View</code> if no recycled <code>View</code> is provided; otherwise, a recycled <code>View</code> is reused to prevent overinflating too many <code>View</code> objects.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class GitHubRepoAdapter extends BaseAdapter {
</span><span class='line'>
</span><span class='line'>    private List&lt;GitHubRepo&gt; gitHubRepos = new ArrayList&lt;&gt;();
</span><span class='line'>
</span><span class='line'>    @Override public int getCount() {
</span><span class='line'>        return gitHubRepos.size();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override public GitHubRepo getItem(int position) {
</span><span class='line'>        if (position &lt; 0 || position &gt;= gitHubRepos.size()) {
</span><span class='line'>            return null;
</span><span class='line'>        } else {
</span><span class='line'>            return gitHubRepos.get(position);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override public long getItemId(int position) {
</span><span class='line'>        return position;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override public View getView(int position, View convertView, ViewGroup parent) {
</span><span class='line'>        final View view = (convertView != null ? convertView : createView(parent));
</span><span class='line'>        final GitHubRepoViewHolder viewHolder = (GitHubRepoViewHolder) view.getTag();
</span><span class='line'>        viewHolder.setGitHubRepo(getItem(position));
</span><span class='line'>        return view;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public void setGitHubRepos(@Nullable List&lt;GitHubRepo&gt; repos) {
</span><span class='line'>        if (repos == null) {
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>        gitHubRepos.clear();
</span><span class='line'>        gitHubRepos.addAll(repos);
</span><span class='line'>        notifyDataSetChanged();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    private View createView(ViewGroup parent) {
</span><span class='line'>        final LayoutInflater inflater = LayoutInflater.from(parent.getContext());
</span><span class='line'>        final View view = inflater.inflate(R.layout.item_github_repo, parent, false);
</span><span class='line'>        final GitHubRepoViewHolder viewHolder = new GitHubRepoViewHolder(view);
</span><span class='line'>        view.setTag(viewHolder);
</span><span class='line'>        return view;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    private static class GitHubRepoViewHolder {
</span><span class='line'>
</span><span class='line'>        private TextView textRepoName;
</span><span class='line'>        private TextView textRepoDescription;
</span><span class='line'>        private TextView textLanguage;
</span><span class='line'>        private TextView textStars;
</span><span class='line'>
</span><span class='line'>        public GitHubRepoViewHolder(View view) {
</span><span class='line'>            textRepoName = (TextView) view.findViewById(R.id.text_repo_name);
</span><span class='line'>            textRepoDescription = (TextView) view.findViewById(R.id.text_repo_description);
</span><span class='line'>            textLanguage = (TextView) view.findViewById(R.id.text_language);
</span><span class='line'>            textStars = (TextView) view.findViewById(R.id.text_stars);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        public void setGitHubRepo(GitHubRepo gitHubRepo) {
</span><span class='line'>            textRepoName.setText(gitHubRepo.name);
</span><span class='line'>            textRepoDescription.setText(gitHubRepo.description);
</span><span class='line'>            textLanguage.setText("Language: " + gitHubRepo.language);
</span><span class='line'>            textStars.setText("Stars: " + gitHubRepo.stargazersCount);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Glue everything together in <code>MainActivity</code>. This is essentially the <code>Activity</code> that gets displayed when we first launch the app. In here, we ask the user to enter their GitHub username, and finally, display all the starred repositories by that username.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class MainActivity extends AppCompatActivity {
</span><span class='line'>
</span><span class='line'>    private static final String TAG = MainActivity.class.getSimpleName();
</span><span class='line'>    private GitHubRepoAdapter adapter = new GitHubRepoAdapter();
</span><span class='line'>    private Subscription subscription;
</span><span class='line'>
</span><span class='line'>    @Override protected void onCreate(Bundle savedInstanceState) {
</span><span class='line'>        super.onCreate(savedInstanceState);
</span><span class='line'>        setContentView(R.layout.activity_main);
</span><span class='line'>
</span><span class='line'>        final ListView listView = (ListView) findViewById(R.id.list_view_repos);
</span><span class='line'>        listView.setAdapter(adapter);
</span><span class='line'>
</span><span class='line'>        final EditText editTextUsername = (EditText) findViewById(R.id.edit_text_username);
</span><span class='line'>        final Button buttonSearch = (Button) findViewById(R.id.button_search);
</span><span class='line'>        buttonSearch.setOnClickListener(new View.OnClickListener() {
</span><span class='line'>            @Override public void onClick(View v) {
</span><span class='line'>                final String username = editTextUsername.getText().toString();
</span><span class='line'>                if (!TextUtils.isEmpty(username)) {
</span><span class='line'>                    getStarredRepos(username);
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        });
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override protected void onDestroy() {
</span><span class='line'>        if (subscription != null && !subscription.isUnsubscribed()) {
</span><span class='line'>            subscription.unsubscribe();
</span><span class='line'>        }
</span><span class='line'>        super.onDestroy();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    private void getStarredRepos(String username) {
</span><span class='line'>        subscription = GitHubClient.getInstance()
</span><span class='line'>                                   .getStarredRepos(username)
</span><span class='line'>                                   .subscribeOn(Schedulers.io())
</span><span class='line'>                                   .observeOn(AndroidSchedulers.mainThread())
</span><span class='line'>                                   .subscribe(new Observer&lt;List&lt;GitHubRepo&gt;&gt;() {
</span><span class='line'>                                       @Override public void onCompleted() {
</span><span class='line'>                                           Log.d(TAG, "In onCompleted()");
</span><span class='line'>                                       }
</span><span class='line'>
</span><span class='line'>                                       @Override public void onError(Throwable e) {
</span><span class='line'>                                           e.printStackTrace();
</span><span class='line'>                                           Log.d(TAG, "In onError()");
</span><span class='line'>                                       }
</span><span class='line'>
</span><span class='line'>                                       @Override public void onNext(List&lt;GitHubRepo&gt; gitHubRepos) {
</span><span class='line'>                                           Log.d(TAG, "In onNext()");
</span><span class='line'>                                           adapter.setGitHubRepos(gitHubRepos);
</span><span class='line'>                                       }
</span><span class='line'>                                   });
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Run the App</h2>

<p>Running the app should present a screen with an input box to enter a GitHub username. Searching should then present the list of all starred repos.</p>

<p><img class="center" src="http://chrisarriola.me/images/rxjava_screenshot.png"></p>

<h1>Conclusion</h1>

<p>I hope this serves as a useful introduction to RxJava and an overview of its basic capabilities. There are a ton of powerful concepts in RxJava and I urge you to explore them by digging more deeply into the well-documented <a href="https://github.com/ReactiveX/rxjava/wiki">RxJava wiki</a>.</p>

<p>Feel free to leave any questions or comments in the comment box below. You can also follow me on Twitter at <a href="http://twitter.com/arriolachris">@arriolachris</a> where I tweet a lot about RxJava and all things Android.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Attached To Your State]]></title>
    <link href="http://chrisarriola.me/blog/2015/12/29/getting-attached-to-your-state/"/>
    <updated>2015-12-29T17:38:18-06:00</updated>
    <id>http://chrisarriola.me/blog/2015/12/29/getting-attached-to-your-state</id>
    <content type="html"><![CDATA[<p><a href="http://developer.android.com/guide/topics/resources/runtime-changes.html#HandlingTheChange">Configuration changes</a> occur in runtime and are caused by various events such as: when keyboard visibility changes, when language changes, or when orientation changes. This in turn causes any <em>visible Activity</em> to be reconstructed once the change finishes. For state to be recovered, it needs to be explicitly tied to Android’s parcelling mechanism via Bundle.</p>

<h3>Saving State, The Wrong Way</h3>

<p>Upon encountering state loss caused by a configuration change, say on an orientation change, 2 poor solutions are:</p>

<h4>1. Locking the orientation mode</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;activity 
</span><span class='line'>    android:name="com.app.app.MainActivity"
</span><span class='line'>    android:screenOrientation="portrait" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>This is an anti-solution and simply prevents the configuration change from occurring. This will not guard against <a href="http://developer.android.com/guide/topics/manifest/activity-element.html#config">the other 13 configuration changes</a> as of API level 23.</p>

<blockquote><p>Orientation should only be locked as a result of a UI/UX decision, and not for retaining state.</p></blockquote>

<h4>2. Handling configuration changes manually</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;activity 
</span><span class='line'>    android:name="com.app.app.MainActivity"
</span><span class='line'>    android:configChanges="orientation" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Again, this is a band-aid and not a proper solution. What if new configuration changes are introduced? Also this might cause some unintended consequences. Say for example you want to declare a landscape/portrait-specific resource, that resource will not be loaded automatically anymore and you need to explicitly load and apply it in <strong>Activity#onConfigurationChanged()</strong> instead. Not knowing this consequence may be a pain to debug.</p>

<p>Quoting <a href="http://www.curious-creature.com/">Roman Guy</a>:</p>

<blockquote><p>“&hellip;it is sometimes confusing for new Android developers who wonder why their activity is destroyed and recreated. Facing this “issue,” some developers choose to handle configuration changes themselves which is, in my opinion, a short-term solution that will complicate their life when other devices come out or when the application becomes more complex. The automatic resource handling is a very efficient and easy way to adapt your application’s user interface to various devices and devices configurations.”</p></blockquote>

<p>Indeed, it is good practice to allow the system to do what it was designed to do as it allows your application to behave correctly on varying devices especially as your application gets more complex.</p>

<blockquote><p>Manually handling configuration changes should only be done sparingly and as a result of some constraint (e.g. performance reasons).</p></blockquote>

<h3>Saving State, The Right Way</h3>

<p>Luckily, framework Views will automatically be saved and recovered for you—<em>assuming all your Views have unique IDs</em>. In other instances you need to explicitly retain state.</p>

<h4>Retaining State In An Activity</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>public void onSaveInstanceState(Bundle savedInstanceState) {
</span><span class='line'>    // This is called by the system so that any instance that can be recovered
</span><span class='line'>    // when the Activity is recreated.
</span><span class='line'>    savedInstanceState.putInt(SOME_VALUE, someIntValue);
</span><span class='line'>    super.onSaveInstanceState(savedInstanceState);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public void onRestoreInstanceState(Bundle savedInstanceState) {
</span><span class='line'>    // This is called by the system when the Activity is reconstructed.
</span><span class='line'>    super.onRestoreInstanceState(savedInstanceState);
</span><span class='line'>    someIntValue = savedInstanceState.getInt(SOME_VALUE);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>There are other lifecycle events where state can be restored such as in <strong>Activity#onCreate()</strong>. Retaining state in a Fragment can be done in a similar way via <strong>Fragment#onSaveInstanceState()</strong>. Here’s <a href="https://guides.codepath.com/android/Handling-Configuration-Changes">a good resource by CodePath</a> for learning more about how this works.</p>

<h4>Retaining State in A Custom View</h4>

<p>Retaining state in a custom View is a bit more involved but nonetheless also fairly straightforward.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.operator.android;
</span><span class='line'>
</span><span class='line'>import android.content.Context;
</span><span class='line'>import android.os.Parcel;
</span><span class='line'>import android.os.Parcelable;
</span><span class='line'>import android.view.View;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * A custom {@link View} that demonstrates how to save/restore instance state.
</span><span class='line'> */
</span><span class='line'>public class CustomView extends View {
</span><span class='line'>
</span><span class='line'>    private boolean someState;
</span><span class='line'>
</span><span class='line'>    public CustomView(Context context) {
</span><span class='line'>        super(context);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public boolean isSomeState() {
</span><span class='line'>        return someState;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public void setSomeState(boolean someState) {
</span><span class='line'>        this.someState = someState;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override protected Parcelable onSaveInstanceState() {
</span><span class='line'>        final Parcelable superState = super.onSaveInstanceState();
</span><span class='line'>        final CustomViewSavedState customViewSavedState = new CustomViewSavedState(superState);
</span><span class='line'>        customViewSavedState.someState = this.someState;
</span><span class='line'>        return customViewSavedState;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override protected void onRestoreInstanceState(Parcelable state) {
</span><span class='line'>        final CustomViewSavedState customViewSavedState = (CustomViewSavedState) state;
</span><span class='line'>        setSomeState(customViewSavedState.someState);
</span><span class='line'>        super.onRestoreInstanceState(customViewSavedState.getSuperState());
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    private static class CustomViewSavedState extends BaseSavedState {
</span><span class='line'>
</span><span class='line'>        boolean someState;
</span><span class='line'>
</span><span class='line'>        public static final Parcelable.Creator&lt;CustomViewSavedState&gt; CREATOR = new Creator&lt;CustomViewSavedState&gt;() {
</span><span class='line'>            @Override public CustomViewSavedState createFromParcel(Parcel source) {
</span><span class='line'>                return new CustomViewSavedState(source);
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            @Override public CustomViewSavedState[] newArray(int size) {
</span><span class='line'>                return new CustomViewSavedState[size];
</span><span class='line'>            }
</span><span class='line'>        };
</span><span class='line'>
</span><span class='line'>        public CustomViewSavedState(Parcelable superState) {
</span><span class='line'>            super(superState);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        private CustomViewSavedState(Parcel source) {
</span><span class='line'>            super(source);
</span><span class='line'>            someState = source.readInt() == 1;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        @Override public void writeToParcel(Parcel out, int flags) {
</span><span class='line'>            super.writeToParcel(out, flags);
</span><span class='line'>            out.writeInt(someState ? 1 : 0);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>TL;DR</h3>

<ul>
<li>Don’t save your state the wrong way 😅 Save your state the right way 😁</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Like a Goldfish]]></title>
    <link href="http://chrisarriola.me/blog/2015/10/18/code-like-a-goldfish/"/>
    <updated>2015-10-18T18:46:47-05:00</updated>
    <id>http://chrisarriola.me/blog/2015/10/18/code-like-a-goldfish</id>
    <content type="html"><![CDATA[<p>There is an underlying hidden requirement in creating software products. It doesn&rsquo;t just have to &ldquo;work&rdquo;; it needs to be molded in such a way that it can be changed, maintained, and scaled easily.</p>

<p>Last month, I gave a talk addressing this topic to the 1st cohort at <a href="http://www.telegraphacademy.com/">Telegraph Academy</a>—an  immersive program that teaches underrepresented groups in tech on how to code. They were nearing their last week of the program so I thought it would be relevant to share some industry lessons.</p>

<p><strong>TL;DR</strong></p>

<ol>
<li><p>Design early</p>

<p> The biggest mistake beginners tend to make is not taking the time to think through the pros/cons of a software design. Designing early makes it easier to find flaws, it&rsquo;s much harder fixing those flaws once it&rsquo;s expressed in code.</p></li>
<li><p>Don&rsquo;t over optimize</p>

<p> This doesn&rsquo;t just apply to algorithms (e.g. trying to get O(n * log n) performance vs O(n<sup>2</sup>) on a small dataset), but it also applies to software design. Don&rsquo;t over-engineer or over-genericize a problem if it doesn&rsquo;t have to be.</p></li>
<li><p>Don&rsquo;t repeat yourself (DRY)</p>

<p> Code repetition means if something needs to be changed/fixed, it needs to be changed in all parts of the code which is error-prone. Have one source of truth and abstract where appropriate.</p></li>
<li><p>Think small</p>

<p> Smaller classes, methods, and files are easier to maintain.</p></li>
</ol>


<p>Check out the slides <a href="https://speakerdeck.com/arriolac/code-like-a-goldfish">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Wear App: reMIND]]></title>
    <link href="http://chrisarriola.me/blog/2014/08/24/remind/"/>
    <updated>2014-08-24T15:29:55-05:00</updated>
    <id>http://chrisarriola.me/blog/2014/08/24/remind</id>
    <content type="html"><![CDATA[<h2>Pay attention.</h2>

<p><img class="right" src="http://chrisarriola.me/images/procrastination.jpg" width="457" height="320"></p>

<p>The statement above reminds us that being attentive costs something. To fully listen and be aware requires some level of deliberate focus.</p>

<p>Given stimuli that constantly try to grab our attention, it’s kind of hard to do that.</p>

<p>Recently, I’ve been meditating a lot and have been using apps like <a href="http://calm.com">Calm.com</a> and <a href="https://www.headspace.com/">Headspace</a>. I find meditation extremely useful as it helps bring awareness to what you’re feeling in the moment. As simple as it sounds, it’s actually really important because your mood determines the quality of your actions. Feeling really motivated and energized? Do the hardest and most important task on your list. Feeling scatterbrained and under the weather? Do simple and menial tasks instead.</p>

<p>Aside from meditation helping with self-awareness, I find that it also helps with appreciating the moment. Worries about the past or the future are irrelevant because the present is only <em>what is</em>. That understanding brings peace of a mind and encourages just <em>being with it</em>.</p>

<p>As a way to remind myself and others of this fact, I created an Android Wear app that sends reminders throughout the day to be present. Upon being reminded, you can then do your personal mindfulness practice or simply appreciate the moment. <a href="https://play.google.com/store/apps/details?id=chrisarriola.me.remind">Check it out</a>.</p>

<p><img class="center" src="http://chrisarriola.me/images/remind.png" width="457" height="320"></p>

<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deep Work]]></title>
    <link href="http://chrisarriola.me/blog/2014/01/17/deep-work/"/>
    <updated>2014-01-17T22:19:00-06:00</updated>
    <id>http://chrisarriola.me/blog/2014/01/17/deep-work</id>
    <content type="html"><![CDATA[<br/>


<h3>&ldquo;What should I do next to get better at X?&rdquo;</h3>

<br/>


<p><em>Practice&hellip; right?</em></p>

<br/>


<p>When I was in college, I followed a blog by Cal Newport called &ldquo;Study Hacks&rdquo;. If you haven&rsquo;t heard of it yet, I <strong>highly</strong> encourage you to check it out. It changed a lot of my perspectives and some of the lessons I learned I still practice today. Check it out <a href="http://calnewport.com/blog/">here</a>.</p>

<p>As I was thinking about the question above, I thought of a topic discussed on <em>Study Hacks</em> called <a href="http://calnewport.com/blog/2012/11/21/knowledge-workers-are-bad-at-working-and-heres-what-to-do-about-it/">Deep Work</a>.</p>

<p><em>Deep work</em>, according to Cal, is the type of work that causes our abilities to continually improve. It is a source of deeper satisfaction; that is, a feeling of passion towards whatever it is we&rsquo;re pursuing. In contrast, so called <em>shallow work</em> are the types of tasks that require minimal amount of effort. These are the tasks that through repetition and training we&rsquo;re able to do with our eyes closed.</p>

<p>Figuratively, of course.</p>

<p>The answer to the question I posed to myself requires some amount of deep work. With that said, here&rsquo;s how I go about preparing myself for some deep work:</p>

<ol>
<li><p><strong>Quiet time</strong></p>

<p> The simple act of turning off all my devices and &ldquo;unplugging&rdquo; myself unleashes tons of creative juices. Distractions from tweets, likes, +1s, e-mails, etc. make it hard to get into any sort of rhythm. Once unplugged, I find that I don&rsquo;t really need to think of anything at all &ndash; ideas just start flowing.</p>

<p> Ironically, some of my most creative moments are in the plane when I&rsquo;m bored out of my mind. Who said boredom was a bad thing??</p></li>
<li><p><strong>Plan for tomorrow</strong></p>

<p> I have trouble maintaining a very rigid routine/schedule. However, it&rsquo;s incredibly easy to plan for the next day. I find that if I just jot down a few reasonable and achievable tasks for myself to do the next day, my mind has time to prepare for what&rsquo;s ahead. Surprisingly, this motivates me to wake up early the following day too.</p></li>
<li><p><strong>Be in the now.</strong></p>

<p> The most important part about execution of deep work is to be in the moment. You just need to pay attention to what you&rsquo;re doing. To &ldquo;pay attention&rdquo; is such a great sentiment in this context as it reminds us that attention costs something&hellip; energy.</p></li>
</ol>


<p>How do you prepare yourself for <em>deep work</em>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Migration]]></title>
    <link href="http://chrisarriola.me/blog/2014/01/11/blog-migration/"/>
    <updated>2014-01-11T13:06:18-06:00</updated>
    <id>http://chrisarriola.me/blog/2014/01/11/blog-migration</id>
    <content type="html"><![CDATA[<p>Just moved my blog from a <a href="http://chrisarriola.wordpress.com">wordpress.com site</a> to Octopress hosted on GitHub. Surprisingly, the set-up was really quick including migrating all of my posts and tweaking some colors from the theme I chose. Not everything went smoothly though; I lost all of my comments and images on posts had some formatting issues. Aside from that, it only took a few hours.</p>

<p>Feel free to leave a comment for any suggestions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Power of Now by Eckhart Tolle]]></title>
    <link href="http://chrisarriola.me/blog/2013/11/21/480/"/>
    <updated>2013-11-21T00:00:00-06:00</updated>
    <id>http://chrisarriola.me/blog/2013/11/21/480</id>
    <content type="html"><![CDATA[<a style="float:left;padding-right:20px;" href="https://www.goodreads.com/book/show/6708.The_Power_of_Now"><img alt="The Power of Now: A Guide to Spiritual Enlightenment" src="https://d202m5krfqbpi5.cloudfront.net/books/1328746059m/6708.jpg" border="0" /></a><a href="https://www.goodreads.com/book/show/6708.The_Power_of_Now">The Power of Now: A Guide to Spiritual Enlightenment</a> by <a href="https://www.goodreads.com/author/show/4493.Eckhart_Tolle">Eckhart Tolle</a>

My rating: <a href="https://www.goodreads.com/review/show/721445353">5 of 5 stars</a>

Added more context to my understanding of why the present is what&#8217;s most important.

<a href="https://www.goodreads.com/review/list/7114307-chris-arriola">View all my reviews</a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preparing for a Hackathon (A Mobile Perspective)]]></title>
    <link href="http://chrisarriola.me/blog/2013/07/23/preparing-for-a-hackathon-a-mobile-perspective/"/>
    <updated>2013-07-23T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2013/07/23/preparing-for-a-hackathon-a-mobile-perspective</id>
    <content type="html"><![CDATA[<a href="http://chrisarriola.files.wordpress.com/2013/07/536444_10150917662022200_1083819652_a.jpg"><img class="size-full wp-image  " id="i-461" alt="Image" align="middle" src="http://chrisarriola.files.wordpress.com/2013/07/536444_10150917662022200_1083819652_a.jpg?w=170" width="170" height="261" /></a>
<p dir="ltr">The time-pressure imposed at hackathons make it essential for teams to prepare ahead of time so that they can focus on the most critical tasks (building the actual product) the day of the event. Typically though, hackers come in without a team or idea. Whether you fall under this category or not, <em>preparation is still important</em>. Given that a full-blown business and a polished working product is unlikely to be built overnight, the point of a hackathon should be to learn as much as you can as well as form long-lasting relationships with people in your team—<strong>the burning desire for building and creating new things does not stop after a weekend</strong>!</p>
<p dir="ltr">Let’s say you do have a team and an idea to work on over the course of a sleep-deprived weekend. So where should you start? I thought I’d share some mobile-specific (Android and iOS) tools and projects you can leverage to bootstrap the development process.</p>

<h3>Back-end</h3>
<p dir="ltr">If you want to do data-persistence you can always build your own server logic, create RESTful APIs and create database schemas, but if you want a simple back-end service solution, the best option right now is to use <a title="Parse" href="www.parse.com" target="_blank">Parse</a>. <em>Parse</em> allows you to create models in a nice visual dashboard and then automatically creates a RESTful API for you to do CRUD operations on that model. Best of all, <em>Parse</em> is free until you hit a million requests on the API which is something you don’t have to worry about in a hackathon setting. In short, if you’re building a mobile app and you don’t have a dedicated server guy, go with <em>Parse</em>.</p>

<h3>Networking</h3>
<p dir="ltr">If you’re going to be integrating with some sort of web service (Facebook, Twitter, etc.), chances are, you’ll be using their APIs. Perhaps you might build your own API. Regardless, client-side you’ll need a pretty solid networking library to use. iOS and Android have their native implementations but you’ll be better of using a 3rd party library with a much simpler API that abstracts all the nitty-gritty details of HTTP. For iOS, <a title="AFNetworking" href="https://github.com/AFNetworking/AFNetworking" target="_blank">AFNetworking</a> and <a title="RestKit" href="https://github.com/RestKit/RestKit" target="_blank">RestKit</a> (uses <em>AFNetworking</em>) are the common solutions, whereas for Android, you have a couple of options but to name a few <a title="OkHTTP" href="https://github.com/square/okhttp" target="_blank">OkHTTP</a>, <a title="Retrofit" href="http://square.github.io/retrofit/" target="_blank">Retrofit</a> and <a title="android-async-http" href="https://github.com/loopj/android-async-http" target="_blank">android-async-http</a> are pretty solid.</p>

<h3>Convenience Libraries</h3>
<p dir="ltr">Do you make common mistakes on Android such as forgetting to check for <em>null</em>? Do you have the issue of stale objects such as Fragments and/or Activities when doing callbacks? A couple of ways to get around that is to use <a title="Guava" href="https://code.google.com/p/guava-libraries/" target="_blank">Guava</a> which has a lot of convenience classes that for Java, and to use some sort of event bus such as Square’s <a title="Otto" href="https://github.com/square/otto" target="_blank">Otto</a> to avoid callback nightmare.</p>
<p dir="ltr">Hopefully these tools help you with your next Hackathon. If you have any suggestions/tips please feel free to leave a comment. Keep hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Security Part 1 - Reverse Engineering Android Apps]]></title>
    <link href="http://chrisarriola.me/blog/2012/08/31/android-security-part-1-reverse-engineering-android-apps/"/>
    <updated>2012-08-31T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/08/31/android-security-part-1-reverse-engineering-android-apps</id>
    <content type="html"><![CDATA[<p>
Google introduced automatic support for <strong>ProGuard</strong>, a code obfuscation tool, in ADT as early as December 2010 in version 8.0.0. It is integrated into the build system to make code obfuscation a pretty &#8220;straightforward&#8221; process. Since then, Google has encouraged—albeit not proactively—developers to enable ProGuard to prevent hackers from reverse engineering and hacking applications. Despite enabling ProGuard, however, a very persistent hacker may still be able to reverse engineer a ProGuard-ed application but the task becomes exponentially harder. There are other good practices developers should abide by to ensure a secure app, but code obfuscation should always be the first line of defense (more information on code obfuscation on Android <a title="ProGuard" href="http://android-developers.blogspot.com/2010/09/proguard-android-and-licensing-server.html">here</a> and <a title="ProGuard 2" href="http://android-developers.blogspot.com/2010/09/securing-android-lvl-applications.html">here</a>).

Out of curiosity, I went ahead and did some reverse engineering on some popular apps (all have more than 1 million downloads on Google Play) that may contain user sensitive information and un/surprisingly, 10 out of 12 weren&#8217;t doing some sort of code obfuscation. I&#8217;m sharing in this post what and how I did that to point out 2 things: (1) how easy it is to reverse engineer an app, and (2) to increase awareness of the importance of security specifically code obfuscation.
</p>

<br />
<h3>Methodology</h3>
<br />


My methodology was simple, in fact, a quick Google Search on &#8221;<em>Android Hacking</em>&#8221; should give anyone the tools to do this. Below are the steps: <br /><br />
<ol>
	<li>Obtain the .apk files of the applications of interest by using <em>Astro File Manager</em>. Simply navigate to &#8220;tools&#8221; in the options menu, &#8220;Application Backup&#8221;, and then select all the apps you&#8217;re interested in. Once backup is perform, an image is obtained of the apps and the corresponding .apk files will be stored under your SD card&#8217;s <em>backups/</em> directory.</li>
	<li>Unpack .apk file using <em>unzip</em>.</li>
	<li>Disassemble compiled <em>classes.dex</em> file using <a title="smali/baksmali" href="http://code.google.com/p/smali/">baksmali</a>. This will generate tons of .smali files.</li>
	<li>Perform static analysis on .smali files.</li>
</ol>
<br>
For step 4, if an application does not have code obfuscation, then all static constant declarations can be read in plain text (<span style="color:#ff0000;">red flag</span>!). You can still take things a step further, for instance, by writing smali code and retracing your steps to create your own custom hacked-out app.

<br /><br />
<h3>Results</h3>

Understanding <em>smali</em> code is pretty straightforward event without prior knowledge of the language especially when it comes to finding static member fields. Declared String values are human-readable.

Here are a few screen-shots of what I&#8217;ve found:

<br />
<a href="http://chrisarriola.files.wordpress.com/2012/08/secret.png"><img class="size-full wp-image-435" title="Key 1" src="http://chrisarriola.files.wordpress.com/2012/08/secret.png" alt="" width="510" height="22" /></a> Fig. 1
<a href="http://chrisarriola.files.wordpress.com/2012/08/secret2.png"><img class="size-full wp-image-434" title="Key 2" src="http://chrisarriola.files.wordpress.com/2012/08/secret2.png" alt="" width="510" height="37" /></a> Fig. 2
<a href="http://chrisarriola.files.wordpress.com/2012/08/secret3.png"><img class="size-full wp-image-433" title="Key 3" src="http://chrisarriola.files.wordpress.com/2012/08/secret3.png" alt="" width="510" height="26" /></a> Fig. 3
<a href="http://chrisarriola.files.wordpress.com/2012/08/secret4.png"><img class="size-full wp-image-432" title="secret4" src="http://chrisarriola.files.wordpress.com/2012/08/secret4.png" alt="" width="510" height="16" /></a> Fig. 4

<br /> <br />
<h3>Conclusion</h3>


ProGuard creates drastic improvements in security. Here&#8217;s an example of how smali code would look like with ProGuard on vs. with ProGuard off.

Say your <em>Activity </em>has a static member field <em>HACK_THIS</em>:<br />

<a href="http://chrisarriola.files.wordpress.com/2012/08/java-code1.png"><img class="size-full wp-image-444" title="java-code" src="http://chrisarriola.files.wordpress.com/2012/08/java-code1.png" alt="" width="510" height="320" /></a> Fig. 5<br /><br />

When we disassemble the resulting .dex file without ProGuard enabled, we get this:<br /><br />

<a href="http://chrisarriola.files.wordpress.com/2012/08/proguarded.png"><img class="size-full wp-image-442" title="ProGuarded" src="http://chrisarriola.files.wordpress.com/2012/08/proguarded.png" alt="" width="510" height="484" /></a> Fig. 6<br /><br />

Whereas code obfuscation using ProGuard results in: <br /><br />

<a href="http://chrisarriola.files.wordpress.com/2012/08/proguarded1.png"><img class="aligncenter size-full wp-image-449" title="proguarded" src="http://chrisarriola.files.wordpress.com/2012/08/proguarded1.png" alt="" width="510" height="485" /></a><br /><br />

From this comparison, you can observe the following: enabling ProGuard in this situation removes the human-readable static member field whereas disabling it leaves it in plain-text in smali assembly code. Although the content of the String gets copied wherever it is used in code as seen on line 39 in Figure 7, the context of what that String represents is virtually unknown. Again, a persistent hacker may deduce what that means through brute-force, but ProGuard increases the complexity of the task.

#####

Any tips on how to create a secure Android app? Leave a comment below!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android: Capture and Crop an Image]]></title>
    <link href="http://chrisarriola.me/blog/2012/07/18/android-capture-and-crop-an-image/"/>
    <updated>2012-07-18T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/07/18/android-capture-and-crop-an-image</id>
    <content type="html"><![CDATA[One line: Intent cropIntent = <span style="color:#3366ff;"><strong>new</strong></span> Intent(<span style="color:#0000ff;">&#8220;com.android.camera.action.CROP&#8221;</span>);

Great tutorial from mobile tuts+: <a href="http://mobile.tutsplus.com/tutorials/android/capture-and-crop-an-image-with-the-device-camera/">http://mobile.tutsplus.com/tutorials/android/capture-and-crop-an-image-with-the-device-camera/</a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Data with ListView + Loading Footer]]></title>
    <link href="http://chrisarriola.me/blog/2012/06/15/dynamic-data-with-listview-loading-footer/"/>
    <updated>2012-06-15T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/06/15/dynamic-data-with-listview-loading-footer</id>
    <content type="html"><![CDATA[<p>
A pretty common UI design pattern for  ListViews on Android is displaying a loading footer for the dynamic loading of a list. It&#8217;s a pattern used by several well known apps - Twitter, Gmail and Instagram to mention a few - to display data without having to click a button to paginate through information. Essentially, as a user scrolls down to the end of a list, which indicates the end of the current page, a loading indicator is displayed at the footer of the list to notify the user that the list is in the process of populating more data.</p>

<div style="text-align:center;">
    <a href="http://chrisarriola.files.wordpress.com/2012/06/dynamiclist.png"><img class="size-full wp-image-389" title="Dynamic List" src="http://chrisarriola.files.wordpress.com/2012/06/dynamiclist.png" alt="" width="510" height="340" /></a> 
</div>

<div style="text-align:center;">
    <a href="http://www.androidpatterns.com/uap_pattern/dynamic-loading-of-a-list">Dynamic Loading of a List</a>
</div><br>

<p>
While playing around with this pattern, I was quite surprise how not-so-straightforward it was to implement this (then again, that&#8217;s programming for you). With that said, I&#8217;d like to share my implementation with you in case you&#8217;re trying to use this pattern in your application.
</p>

<h3>Trial 1</h3>
The intuitive way to go about this is to (1) simply attach an Adapter with the first page of items to a ListView, (2) attach an OnScrollListener to detect if the bottom of the list has been reached, if so, (3) add a loading footer view to the list while retrieving more data, and when the retrieval process is done, remove the loading footer and (4) update the adapter with the recently pulled data.

Sounds pretty straightforward right? Turns out, it&#8217;s not.

Here&#8217;s some code snippets of the above approach.

(1) &amp; (2)
<pre>ListView list = (ListView) findViewById(R.id.listview);
MyAdapter adapter = new MyAdapter(context, items);
list.setAdapter(adapter);

list.setOnScrollListener(new OnScrollListener() {
    @Override
    public void onScrollStateChanged(AbsListView view, 
            int scrollState) {
         <span style="color:#339966;">// Do nothing</span>
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, 
            int visibleItemCount, int totalItemCount) {

        <span style="color:#339966;">// threshold being indicator if bottom of list is hit</span>
        if (firstVisibleItem = threshold) {
            pullMoreData();
        }
    }
});</pre>
(3) &amp; (4)
<pre>private void pullMoreData() {
    doNetworkRequest(page); <span style="color:#339966;">// Perform request for next page</span>
    list.addFooterView(loadingFooter);
}

@Override
public void onNetworkRequestComplete(Request request) {
    list.removeFooterView(loadingFooter);
    adapter.addAll(request.getData());
    adapter.notifyDataSetChanged();
}</pre>
This implementation, however, does not result in the intended action - the footer never gets displayed. A work-around I did for this leads me to&#8230;
<h3>Trial 2</h3>
With my second trial, I did this: (1) attached the footer first before the adapter, and when the bottom of the list has been reached and new data has been retrieved, (2) reattach the footer and create a new adapter with the old+new data which is then reattached to the list. Finally, to bring the user back to the scroll position, I (3) keep track of the first visible item on the scroll view and set the list selection to be this item.

Immediately, a few things must be popping up in your head such as: that must be slow! it&#8217;s a hack! there has to be a cleaner way! etc. I can&#8217;t agree with you more.

(1), (2) &amp; (3)
<pre>ListView list = (ListView) findViewById(R.id.listview);
list.addFooterView(loadingFooter);

MyAdapter adapter = new MyAdapter(context, items);
list.setAdapter(adapter);

list.setOnScrollListener(new OnScrollListener() {
    @Override
    public void onScrollStateChanged(AbsListView view, 
            int scrollState) {
         <span style="color:#339966;">// Do nothing</span>
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, 
            int visibleItemCount, int totalItemCount) {

<span style="color:#339966;"> // member variable for restoring selection</span>
        mSelection = firstVisibleItem;

<span style="color:#339966;"> // threshold being indicator if bottom of list is hit</span>
        if (firstVisibleItem = threshold) {
            pullMoreData();
        }
    }
});

@Override
public void onNetworkRequestComplete(Request request) {
    list.removeFooterView(loadingFooter);
    list.addFooterView(loadingFooter);

    MyAdapter newAdapter = new MyAdapter(this);
    newAdapter.addOldData(adapter);
    newAdapter.addAll(request.getData());

    list.setAdapter(newAdapter);
    adapter = newAdapter;

<span style="color:#339966;"> // Set table to last selection</span>
    list.setSelection(mSelection)
}</pre>
Albeit some performance issues and jerkiness because of (3), this implementation actually works.

Can we do better than this?
<h3>Trial 3</h3>
The trick, it turns out, is to <strong>attach the footer view before setting the adapter</strong>, this way, any combination of adding and removing of the footer view/s just works. <strong>Why does it have to be in order</strong>!? If you have the answer, please leave a comment. I&#8217;d love to know
<pre>ListView list = (ListView) findViewById(R.id.listview);
list.addFooterView(loadingFooter);

MyAdapter adapter = new MyAdapter(context, items);
list.setAdapter(adapter);

<span style="color:#339966;">// this step is important to not display the footer view // right of the bat.</span>
list.removeFooterView(loadingFooter);

list.setOnScrollListener(new OnScrollListener() {
    @Override
    public void onScrollStateChanged(AbsListView view, 
            int scrollState) {
<span style="color:#339966;"> // Do nothing</span>
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, 
            int visibleItemCount, int totalItemCount) {
<span style="color:#339966;"> // threshold being indicator if bottom of list is hit</span>
        if (firstVisibleItem = threshold) {
            pullMoreData();
        }
    }
});</pre>
I&#8217;ll share more Android quirks as they come up, I hope this helped.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Too Many to One - Implementing mHealth]]></title>
    <link href="http://chrisarriola.me/blog/2012/06/06/too-many-to-one/"/>
    <updated>2012-06-06T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/06/06/too-many-to-one</id>
    <content type="html"><![CDATA[For about a year and a half now, I&#8217;ve been volunteering with <a title="Global HEED" href="http://globalheed.org/">Global HEED</a>—a non-profit organization focused on supporting health, education, and economic development globally. Global HEED was started in 2008 by founders Sonny Bandyopadhyay and Zain Ahmed while both pursuing their degrees at the University of Emory. Over the course of 5 years, Global HEED has made a tremendous impact in communities around the world, most notably, in a small village in Guatemala called Calhuitz. Medical students enroll to become a summer fellow wherein they will be responsible for any of the following: developing &amp; teaching public health topics, assessing the communities needs, shadowing/assisting a doctor or nurse, etc. Some of the projects in the past involved building a pharmacy, a community health worker training center, and even first community health clinic in Calhuitz.

The newest project within Global HEED is the mHealth initiative—a telemedicine project whose goal is to improve the quality of healthcare in under-served communities. Specifically, we&#8217;re collaborating with <a title="Partners for Care" href="http://www.partnersforcare.org/">Partners for Care</a>, an NGO based in Kenya, to implement mHealth in the slums of Nairobi by utilizing <a title="Sana Mobile" href="http://sana.mit.edu/">Sana Mobile</a>.
<h4>Problem</h4>
The underlying problem is this: there are too many people in need of healthcare but there aren&#8217;t enough physicians that can support that need. As a result, not everyone gets treated; in addition, taking into account waiting and travel time, visiting a clinic or hospital can be very time consuming. In some instances, patients have to travel ~10 km by foot to pay a visit to the nearest clinic. It&#8217;s a very brutal experience as you might imagine.
<h4>Proposed Solution</h4>
To alleviate this, we implemented Sana as essentially a triaging tool to improve  the delivery and efficiency of healthcare. It works as follows: a community health worker visits a patient and enters the necessary information through the mobile device (patient information, symptoms, photos, etc.), the information is then sent to an electronic medical record system, <a title="OpenMRS" href="http://openmrs.org/">OpenMRS</a>, wherein a remote doctor can send a diagnosis back to the community health worker who would then perform the necessary action (more on this <a title="Case Study - Kenya" href="http://sana.mit.edu/2012/06/02/case-study-kenyan-mhealth-project/">here</a>). Although the entire process seems simple, there&#8217;s still a couple of BIG obstacles to go through before we can comfortably expand into other regions. To name a few, we need to verify uploading information to the EMR works 99% of the time, that patient data is consistent with what&#8217;s recorded, that the community generally accepts the technology, that the project can be evaluated in a metric and quantifiable way&#8230; thinking about all this is giving me a headache.
<h4>Conclusion</h4>
Despite all these obstacles, seeing the passion within the organization itself, that is Global HEED, gives me the confidence that these &#8220;minor&#8221; obstacles can be eventually surpassed. For instance, even though members of Global HEED are from all over the nation—Atlanta, San Francisco, and New York City to name a few—we somehow still manage to consistently collaborate and work towards the same goal thanks to the very passionate leaders within the organization. Not to mention, our use of technology for communication, which enables us to connect, should be a testament to the potential of technology for improving the lives of those around us; not just for those a few houses away, but also for those on the opposite side of the globe.
<blockquote>We who work in technology have nurtured an especially rare gift: the opportunity to effect change at an unprecedented scale and rate. Technology, community, and capitalism combine to make Silicon Valley the potential epicenter of vast positive change. We can tackle the world’s biggest problems and take on bold missions like fixing education, re-imagining energy distribution, connecting people, or even democratizing democracy. And with increasingly severe threats to our survival — rapid climate change, an unstable international economy, and unsustainable energy consumption — it is more important than ever that we use these gifts to change the world, foster happiness and alleviate suffering, for us and our fellow beings.

by <em>Justin Rosentein</em></blockquote>
#####

If you&#8217;re a developer and would like to contribute to the project, please feel free to reach out! You can also just jump and start pushing code into the Sana <a title="Sana Source Code" href="http://sana.mit.edu/wiki/index.php?title=Main_Page">source code</a> repository, it&#8217;s open source.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Goals]]></title>
    <link href="http://chrisarriola.me/blog/2012/05/30/incremental-goals/"/>
    <updated>2012-05-30T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/05/30/incremental-goals</id>
    <content type="html"><![CDATA[Check my post on the JOCC blog about setting <a href="http://wp.me/p1YHaV-3e">Incremental Goals</a>.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Android Layouts]]></title>
    <link href="http://chrisarriola.me/blog/2012/05/23/optimizing-android-layouts/"/>
    <updated>2012-05-23T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/05/23/optimizing-android-layouts</id>
    <content type="html"><![CDATA[I recently used the <strong>hierarchyviewer</strong> &amp; <strong>lint </strong>tool in the Android SDK and was pretty surprised with the results I saw. Many of the views I had were heavily nested and some views did not necessarily have to be inflated off the bat (progress indicators and refresh icons to name a few). As a result, my activity took a performance hit because of a badly designed layout.

Here&#8217;s a technique I used that I picked up at AnDevCon III to flatten my layouts and in general make them more performant.
<h3><strong>ViewStub</strong></h3>
Essentially, ViewStub is a lightweight and cheap to inflate widget that you can include in a layout. Its purpose is basically to serve as a stub or placeholder for views that don&#8217;t necessarily need to be inflated on creation. For example, let&#8217;s say your app displays notifications on a SlidingDrawer; however, when there are no notifications, that SlidingDrawer should be hidden. What you can do then is create a ViewStub that points to your SlidingDrawer layout implementation and when notifications are present, you can simply inflate the ViewStub. Here&#8217;s an example taken from <a href="http://developer.android.com/resources/articles/layout-tricks-stubs.html">Android Developers</a> that displays the flattening of the view hierarchy using ViewStubs.

Layout without ViewStub:

[caption id=&#8221;attachment_341&#8221; align=&#8221;aligncenter&#8221; width=&#8221;510&#8221;]<a href="http://chrisarriola.files.wordpress.com/2012/05/viewstub41.png"><img class="size-full wp-image-341 " title="Layout Without ViewStub" src="http://chrisarriola.files.wordpress.com/2012/05/viewstub41.png" alt="" width="510" height="431" /></a> Layout Without ViewStub[/caption]

Layout using ViewStub:

[caption id=&#8221;attachment_342&#8221; align=&#8221;aligncenter&#8221; width=&#8221;468&#8221;]<a href="http://chrisarriola.files.wordpress.com/2012/05/viewstub3.png"><img class="size-full wp-image-342 " title="Layout With ViewStub" src="http://chrisarriola.files.wordpress.com/2012/05/viewstub3.png" alt="" width="468" height="476" /></a> Layout With ViewStub[/caption]

The code for your layout:
<blockquote>
<pre><span style="color:#0000ff;">&lt;ViewStub</span>
<span style="color:#ff00ff;">android:id</span>=<span style="color:#339966;">"@+id/stub_slidingdrawer"</span>
<span style="color:#ff00ff;">android:layout</span>=<span style="color:#339966;">"@layout/slidingdrawer"</span>
<span style="color:#ff00ff;">android:layout_width</span>=<span style="color:#339966;">"fill_parent"</span>
<span style="color:#ff00ff;">android:layout_height</span>=<span style="color:#339966;">"wrap_content"</span>
<span style="color:#0000ff;">/&gt;</span></pre>
</blockquote>
<span style="color:#0000ff;"><span style="color:#000000;">The code to inflate the ViewStub:</span></span>
<blockquote><span style="color:#0000ff;"><span style="color:#000000;">ViewStub stub = (ViewStub) findViewById(R.id.<span style="color:#0000ff;"><em>stub_slidingdrawer</em></span>);</span>
<span style="color:#000000;">View v = stub.inflate();</span> </span></blockquote>
For my specific case, it took about half the time to inflate the entire layout tree by using a ViewStub for infrequently used child layouts. Pretty sweet.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Avoid Getting a Ticket When Running a Red Light]]></title>
    <link href="http://chrisarriola.me/blog/2012/05/14/how-to-avoid-getting-a-ticket-when-running-a-red-light/"/>
    <updated>2012-05-14T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/05/14/how-to-avoid-getting-a-ticket-when-running-a-red-light</id>
    <content type="html"><![CDATA[[caption id=&#8221;attachment_331&#8221; align=&#8221;aligncenter&#8221; width=&#8221;510&#8221;]<a href="http://chrisarriola.files.wordpress.com/2012/05/xlarge_8ca4aa827c1151851324895f5ffb778b.jpg"><img class="size-full wp-image-331" title="SQL Injection" src="http://chrisarriola.files.wordpress.com/2012/05/xlarge_8ca4aa827c1151851324895f5ffb778b.jpg" alt="" width="510" height="286" /></a> http://gizmodo.com/5498412/sql-injection-license-plate-hopes-to-foil-euro-traffic-cameras[/caption]

&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to create popups in Android]]></title>
    <link href="http://chrisarriola.me/blog/2012/05/10/how-to-create-popups-in-android/"/>
    <updated>2012-05-10T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/05/10/how-to-create-popups-in-android</id>
    <content type="html"><![CDATA[Great tutorial!

<a href="http://wp.me/p26YYL-8n">How to create popups in Android</a>.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Learning Resources]]></title>
    <link href="http://chrisarriola.me/blog/2012/05/01/self-learning-resources/"/>
    <updated>2012-05-01T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/05/01/self-learning-resources</id>
    <content type="html"><![CDATA[One of the many pleasures in life involves learning something new. Whether it be learning a new culture, learning how to paint, learning how to write creatively, or learning how to fly a kite; the act of &#8220;knowing&#8221; something is nothing less than exciting. With that said, I&#8217;m a firm believer in the active pursuit of self-learning and self-education—who said learning should stop in school? Perhaps graduating school is the end of formal learning, but if it were the end of learning in itself, life would be very, very, boring.

Below are some resources I&#8217;ve used in the past for taking free online classes. As my Calc 2 professor would say, these resources are &#8220;jewels in a priceless treasure chest&#8221;.

<strong>Coursera: </strong><a href="https://www.coursera.org/">https://www.coursera.org/</a>

<strong>Academic Earth: </strong><a href="http://www.academicearth.org/">http://www.academicearth.org/</a>

<strong>Khan Academy: </strong><a href="http://www.khanacademy.org/">http://www.khanacademy.org/</a>

<strong></strong><strong>MIT Open Courseware: </strong><a href="http://ocw.mit.edu/">http://ocw.mit.edu/</a>

<strong></strong><strong>Engineer Guy: </strong><a href="http://www.engineerguy.com/">http://www.engineerguy.com/</a>

<strong>Google Code University: </strong><a href="http://code.google.com/edu/">http://code.google.com/edu/</a>

<strong></strong>&#8230;and of course it goes without saying that another great resource for self-learning is&#8230; a book! I&#8217;m currently using <a href="www.goodreads.com">www.goodreads.com</a> to find good recommendations based on books I&#8217;ve read on the past, and it&#8217;s also a good social website to view what your friends are currently reading and what they&#8217;ve read in the past.

I hope you find these priceless &#8220;jewels&#8221; as invaluable as I found them. Enjoy!
]]></content>
  </entry>
  
</feed>
