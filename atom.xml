<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chris Arriola]]></title>
  <link href="http://chrisarriola.me/atom.xml" rel="self"/>
  <link href="http://chrisarriola.me/"/>
  <updated>2016-07-05T16:50:41-05:00</updated>
  <id>http://chrisarriola.me/</id>
  <author>
    <name><![CDATA[Chris Arriola]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Attached To Your State]]></title>
    <link href="http://chrisarriola.me/blog/2015/12/29/getting-attached-to-your-state/"/>
    <updated>2015-12-29T17:38:18-06:00</updated>
    <id>http://chrisarriola.me/blog/2015/12/29/getting-attached-to-your-state</id>
    <content type="html"><![CDATA[<p><a href="http://developer.android.com/guide/topics/resources/runtime-changes.html#HandlingTheChange">Configuration changes</a> occur in runtime and are caused by various events such as: when keyboard visibility changes, when language changes, or when orientation changes. This in turn causes any <em>visible Activity</em> to be reconstructed once the change finishes. For state to be recovered, it needs to be explicitly tied to Android’s parcelling mechanism via Bundle.</p>

<h3>Saving State, The Wrong Way</h3>

<p>Upon encountering state loss caused by a configuration change, say on an orientation change, 2 poor solutions are:</p>

<h4>1. Locking the orientation mode</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;activity 
</span><span class='line'>    android:name="com.app.app.MainActivity"
</span><span class='line'>    android:screenOrientation="portrait" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>This is an anti-solution and simply prevents the configuration change from occurring. This will not guard against <a href="http://developer.android.com/guide/topics/manifest/activity-element.html#config">the other 13 configuration changes</a> as of API level 23.</p>

<blockquote><p>Orientation should only be locked as a result of a UI/UX decision, and not for retaining state.</p></blockquote>

<h4>2. Handling configuration changes manually</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;activity 
</span><span class='line'>    android:name="com.app.app.MainActivity"
</span><span class='line'>    android:configChanges="orientation" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Again, this is a band-aid and not a proper solution. What if new configuration changes are introduced? Also this might cause some unintended consequences. Say for example you want to declare a landscape/portrait-specific resource, that resource will not be loaded automatically anymore and you need to explicitly load and apply it in <strong>Activity#onConfigurationChanged()</strong> instead. Not knowing this consequence may be a pain to debug.</p>

<p>Quoting <a href="http://www.curious-creature.com/">Roman Guy</a>:</p>

<blockquote><p>“&hellip;it is sometimes confusing for new Android developers who wonder why their activity is destroyed and recreated. Facing this “issue,” some developers choose to handle configuration changes themselves which is, in my opinion, a short-term solution that will complicate their life when other devices come out or when the application becomes more complex. The automatic resource handling is a very efficient and easy way to adapt your application’s user interface to various devices and devices configurations.”</p></blockquote>

<p>Indeed, it is good practice to allow the system to do what it was designed to do as it allows your application to behave correctly on varying devices especially as your application gets more complex.</p>

<blockquote><p>Manually handling configuration changes should only be done sparingly and as a result of some constraint (e.g. performance reasons).</p></blockquote>

<h3>Saving State, The Right Way</h3>

<p>Luckily, framework Views will automatically be saved and recovered for you—<em>assuming all your Views have unique IDs</em>. In other instances you need to explicitly retain state.</p>

<h4>Retaining State In An Activity</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>public void onSaveInstanceState(Bundle savedInstanceState) {
</span><span class='line'>    // This is called by the system so that any instance that can be recovered
</span><span class='line'>    // when the Activity is recreated.
</span><span class='line'>    savedInstanceState.putInt(SOME_VALUE, someIntValue);
</span><span class='line'>    super.onSaveInstanceState(savedInstanceState);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public void onRestoreInstanceState(Bundle savedInstanceState) {
</span><span class='line'>    // This is called by the system when the Activity is reconstructed.
</span><span class='line'>    super.onRestoreInstanceState(savedInstanceState);
</span><span class='line'>    someIntValue = savedInstanceState.getInt(SOME_VALUE);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>There are other lifecycle events where state can be restored such as in <strong>Activity#onCreate()</strong>. Retaining state in a Fragment can be done in a similar way via <strong>Fragment#onSaveInstanceState()</strong>. Here’s <a href="https://guides.codepath.com/android/Handling-Configuration-Changes">a good resource by CodePath</a> for learning more about how this works.</p>

<h4>Retaining State in A Custom View</h4>

<p>Retaining state in a custom View is a bit more involved but nonetheless also fairly straightforward.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.operator.android;
</span><span class='line'>
</span><span class='line'>import android.content.Context;
</span><span class='line'>import android.os.Parcel;
</span><span class='line'>import android.os.Parcelable;
</span><span class='line'>import android.view.View;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * A custom {@link View} that demonstrates how to save/restore instance state.
</span><span class='line'> */
</span><span class='line'>public class CustomView extends View {
</span><span class='line'>
</span><span class='line'>    private boolean someState;
</span><span class='line'>
</span><span class='line'>    public CustomView(Context context) {
</span><span class='line'>        super(context);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public boolean isSomeState() {
</span><span class='line'>        return someState;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public void setSomeState(boolean someState) {
</span><span class='line'>        this.someState = someState;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override protected Parcelable onSaveInstanceState() {
</span><span class='line'>        final Parcelable superState = super.onSaveInstanceState();
</span><span class='line'>        final CustomViewSavedState customViewSavedState = new CustomViewSavedState(superState);
</span><span class='line'>        customViewSavedState.someState = this.someState;
</span><span class='line'>        return customViewSavedState;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override protected void onRestoreInstanceState(Parcelable state) {
</span><span class='line'>        final CustomViewSavedState customViewSavedState = (CustomViewSavedState) state;
</span><span class='line'>        setSomeState(customViewSavedState.someState);
</span><span class='line'>        super.onRestoreInstanceState(customViewSavedState.getSuperState());
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    private static class CustomViewSavedState extends BaseSavedState {
</span><span class='line'>
</span><span class='line'>        boolean someState;
</span><span class='line'>
</span><span class='line'>        public static final Parcelable.Creator&lt;CustomViewSavedState&gt; CREATOR = new Creator&lt;CustomViewSavedState&gt;() {
</span><span class='line'>            @Override public CustomViewSavedState createFromParcel(Parcel source) {
</span><span class='line'>                return new CustomViewSavedState(source);
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            @Override public CustomViewSavedState[] newArray(int size) {
</span><span class='line'>                return new CustomViewSavedState[size];
</span><span class='line'>            }
</span><span class='line'>        };
</span><span class='line'>
</span><span class='line'>        public CustomViewSavedState(Parcelable superState) {
</span><span class='line'>            super(superState);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        private CustomViewSavedState(Parcel source) {
</span><span class='line'>            super(source);
</span><span class='line'>            someState = source.readInt() == 1;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        @Override public void writeToParcel(Parcel out, int flags) {
</span><span class='line'>            super.writeToParcel(out, flags);
</span><span class='line'>            out.writeInt(someState ? 1 : 0);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>TL;DR</h3>

<ul>
<li>Don’t save your state the wrong way 😅 Save your state the right way 😁</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Like a Goldfish]]></title>
    <link href="http://chrisarriola.me/blog/2015/10/18/code-like-a-goldfish/"/>
    <updated>2015-10-18T18:46:47-05:00</updated>
    <id>http://chrisarriola.me/blog/2015/10/18/code-like-a-goldfish</id>
    <content type="html"><![CDATA[<p>There is an underlying hidden requirement in creating software products. It doesn&rsquo;t just have to &ldquo;work&rdquo;; it needs to be molded in such a way that it can be changed, maintained, and scaled easily.</p>

<p>Last month, I gave a talk addressing this topic to the 1st cohort at <a href="http://www.telegraphacademy.com/">Telegraph Academy</a>—an  immersive program that teaches underrepresented groups in tech on how to code. They were nearing their last week of the program so I thought it would be relevant to share some industry lessons.</p>

<p><strong>TL;DR</strong></p>

<ol>
<li><p>Design early</p>

<p> The biggest mistake beginners tend to make is not taking the time to think through the pros/cons of a software design. Designing early makes it easier to find flaws, it&rsquo;s much harder fixing those flaws once it&rsquo;s expressed in code.</p></li>
<li><p>Don&rsquo;t over optimize</p>

<p> This doesn&rsquo;t just apply to algorithms (e.g. trying to get O(n * log n) performance vs O(n<sup>2</sup>) on a small dataset), but it also applies to software design. Don&rsquo;t over-engineer or over-genericize a problem if it doesn&rsquo;t have to be.</p></li>
<li><p>Don&rsquo;t repeat yourself (DRY)</p>

<p> Code repetition means if something needs to be changed/fixed, it needs to be changed in all parts of the code which is error-prone. Have one source of truth and abstract where appropriate.</p></li>
<li><p>Think small</p>

<p> Smaller classes, methods, and files are easier to maintain.</p></li>
</ol>


<p>Check out the slides <a href="https://speakerdeck.com/arriolac/code-like-a-goldfish">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Wear App: reMIND]]></title>
    <link href="http://chrisarriola.me/blog/2014/08/24/remind/"/>
    <updated>2014-08-24T15:29:55-05:00</updated>
    <id>http://chrisarriola.me/blog/2014/08/24/remind</id>
    <content type="html"><![CDATA[<h2>Pay attention.</h2>

<p><img class="right" src="http://chrisarriola.me/images/procrastination.jpg" width="457" height="320"></p>

<p>The statement above reminds us that being attentive costs something. To fully listen and be aware requires some level of deliberate focus.</p>

<p>Given stimuli that constantly try to grab our attention, it’s kind of hard to do that.</p>

<p>Recently, I’ve been meditating a lot and have been using apps like <a href="http://calm.com">Calm.com</a> and <a href="https://www.headspace.com/">Headspace</a>. I find meditation extremely useful as it helps bring awareness to what you’re feeling in the moment. As simple as it sounds, it’s actually really important because your mood determines the quality of your actions. Feeling really motivated and energized? Do the hardest and most important task on your list. Feeling scatterbrained and under the weather? Do simple and menial tasks instead.</p>

<p>Aside from meditation helping with self-awareness, I find that it also helps with appreciating the moment. Worries about the past or the future are irrelevant because the present is only <em>what is</em>. That understanding brings peace of a mind and encourages just <em>being with it</em>.</p>

<p>As a way to remind myself and others of this fact, I created an Android Wear app that sends reminders throughout the day to be present. Upon being reminded, you can then do your personal mindfulness practice or simply appreciate the moment. <a href="https://play.google.com/store/apps/details?id=chrisarriola.me.remind">Check it out</a>.</p>

<p><img class="center" src="http://chrisarriola.me/images/remind.png" width="457" height="320"></p>

<br />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deep Work]]></title>
    <link href="http://chrisarriola.me/blog/2014/01/17/deep-work/"/>
    <updated>2014-01-17T22:19:00-06:00</updated>
    <id>http://chrisarriola.me/blog/2014/01/17/deep-work</id>
    <content type="html"><![CDATA[<br/>


<h3>&ldquo;What should I do next to get better at X?&rdquo;</h3>

<br/>


<p><em>Practice&hellip; right?</em></p>

<br/>


<p>When I was in college, I followed a blog by Cal Newport called &ldquo;Study Hacks&rdquo;. If you haven&rsquo;t heard of it yet, I <strong>highly</strong> encourage you to check it out. It changed a lot of my perspectives and some of the lessons I learned I still practice today. Check it out <a href="http://calnewport.com/blog/">here</a>.</p>

<p>As I was thinking about the question above, I thought of a topic discussed on <em>Study Hacks</em> called <a href="http://calnewport.com/blog/2012/11/21/knowledge-workers-are-bad-at-working-and-heres-what-to-do-about-it/">Deep Work</a>.</p>

<p><em>Deep work</em>, according to Cal, is the type of work that causes our abilities to continually improve. It is a source of deeper satisfaction; that is, a feeling of passion towards whatever it is we&rsquo;re pursuing. In contrast, so called <em>shallow work</em> are the types of tasks that require minimal amount of effort. These are the tasks that through repetition and training we&rsquo;re able to do with our eyes closed.</p>

<p>Figuratively, of course.</p>

<p>The answer to the question I posed to myself requires some amount of deep work. With that said, here&rsquo;s how I go about preparing myself for some deep work:</p>

<ol>
<li><p><strong>Quiet time</strong></p>

<p> The simple act of turning off all my devices and &ldquo;unplugging&rdquo; myself unleashes tons of creative juices. Distractions from tweets, likes, +1s, e-mails, etc. make it hard to get into any sort of rhythm. Once unplugged, I find that I don&rsquo;t really need to think of anything at all &ndash; ideas just start flowing.</p>

<p> Ironically, some of my most creative moments are in the plane when I&rsquo;m bored out of my mind. Who said boredom was a bad thing??</p></li>
<li><p><strong>Plan for tomorrow</strong></p>

<p> I have trouble maintaining a very rigid routine/schedule. However, it&rsquo;s incredibly easy to plan for the next day. I find that if I just jot down a few reasonable and achievable tasks for myself to do the next day, my mind has time to prepare for what&rsquo;s ahead. Surprisingly, this motivates me to wake up early the following day too.</p></li>
<li><p><strong>Be in the now.</strong></p>

<p> The most important part about execution of deep work is to be in the moment. You just need to pay attention to what you&rsquo;re doing. To &ldquo;pay attention&rdquo; is such a great sentiment in this context as it reminds us that attention costs something&hellip; energy.</p></li>
</ol>


<p>How do you prepare yourself for <em>deep work</em>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Migration]]></title>
    <link href="http://chrisarriola.me/blog/2014/01/11/blog-migration/"/>
    <updated>2014-01-11T13:06:18-06:00</updated>
    <id>http://chrisarriola.me/blog/2014/01/11/blog-migration</id>
    <content type="html"><![CDATA[<p>Just moved my blog from a <a href="http://chrisarriola.wordpress.com">wordpress.com site</a> to Octopress hosted on GitHub. Surprisingly, the set-up was really quick including migrating all of my posts and tweaking some colors from the theme I chose. Not everything went smoothly though; I lost all of my comments and images on posts had some formatting issues. Aside from that, it only took a few hours.</p>

<p>Feel free to leave a comment for any suggestions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Power of Now by Eckhart Tolle]]></title>
    <link href="http://chrisarriola.me/blog/2013/11/21/480/"/>
    <updated>2013-11-21T00:00:00-06:00</updated>
    <id>http://chrisarriola.me/blog/2013/11/21/480</id>
    <content type="html"><![CDATA[<a style="float:left;padding-right:20px;" href="https://www.goodreads.com/book/show/6708.The_Power_of_Now"><img alt="The Power of Now: A Guide to Spiritual Enlightenment" src="https://d202m5krfqbpi5.cloudfront.net/books/1328746059m/6708.jpg" border="0" /></a><a href="https://www.goodreads.com/book/show/6708.The_Power_of_Now">The Power of Now: A Guide to Spiritual Enlightenment</a> by <a href="https://www.goodreads.com/author/show/4493.Eckhart_Tolle">Eckhart Tolle</a>

My rating: <a href="https://www.goodreads.com/review/show/721445353">5 of 5 stars</a>

Added more context to my understanding of why the present is what&#8217;s most important.

<a href="https://www.goodreads.com/review/list/7114307-chris-arriola">View all my reviews</a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preparing for a Hackathon (A Mobile Perspective)]]></title>
    <link href="http://chrisarriola.me/blog/2013/07/23/preparing-for-a-hackathon-a-mobile-perspective/"/>
    <updated>2013-07-23T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2013/07/23/preparing-for-a-hackathon-a-mobile-perspective</id>
    <content type="html"><![CDATA[<a href="http://chrisarriola.files.wordpress.com/2013/07/536444_10150917662022200_1083819652_a.jpg"><img class="size-full wp-image  " id="i-461" alt="Image" align="middle" src="http://chrisarriola.files.wordpress.com/2013/07/536444_10150917662022200_1083819652_a.jpg?w=170" width="170" height="261" /></a>
<p dir="ltr">The time-pressure imposed at hackathons make it essential for teams to prepare ahead of time so that they can focus on the most critical tasks (building the actual product) the day of the event. Typically though, hackers come in without a team or idea. Whether you fall under this category or not, <em>preparation is still important</em>. Given that a full-blown business and a polished working product is unlikely to be built overnight, the point of a hackathon should be to learn as much as you can as well as form long-lasting relationships with people in your team—<strong>the burning desire for building and creating new things does not stop after a weekend</strong>!</p>
<p dir="ltr">Let’s say you do have a team and an idea to work on over the course of a sleep-deprived weekend. So where should you start? I thought I’d share some mobile-specific (Android and iOS) tools and projects you can leverage to bootstrap the development process.</p>

<h3>Back-end</h3>
<p dir="ltr">If you want to do data-persistence you can always build your own server logic, create RESTful APIs and create database schemas, but if you want a simple back-end service solution, the best option right now is to use <a title="Parse" href="www.parse.com" target="_blank">Parse</a>. <em>Parse</em> allows you to create models in a nice visual dashboard and then automatically creates a RESTful API for you to do CRUD operations on that model. Best of all, <em>Parse</em> is free until you hit a million requests on the API which is something you don’t have to worry about in a hackathon setting. In short, if you’re building a mobile app and you don’t have a dedicated server guy, go with <em>Parse</em>.</p>

<h3>Networking</h3>
<p dir="ltr">If you’re going to be integrating with some sort of web service (Facebook, Twitter, etc.), chances are, you’ll be using their APIs. Perhaps you might build your own API. Regardless, client-side you’ll need a pretty solid networking library to use. iOS and Android have their native implementations but you’ll be better of using a 3rd party library with a much simpler API that abstracts all the nitty-gritty details of HTTP. For iOS, <a title="AFNetworking" href="https://github.com/AFNetworking/AFNetworking" target="_blank">AFNetworking</a> and <a title="RestKit" href="https://github.com/RestKit/RestKit" target="_blank">RestKit</a> (uses <em>AFNetworking</em>) are the common solutions, whereas for Android, you have a couple of options but to name a few <a title="OkHTTP" href="https://github.com/square/okhttp" target="_blank">OkHTTP</a>, <a title="Retrofit" href="http://square.github.io/retrofit/" target="_blank">Retrofit</a> and <a title="android-async-http" href="https://github.com/loopj/android-async-http" target="_blank">android-async-http</a> are pretty solid.</p>

<h3>Convenience Libraries</h3>
<p dir="ltr">Do you make common mistakes on Android such as forgetting to check for <em>null</em>? Do you have the issue of stale objects such as Fragments and/or Activities when doing callbacks? A couple of ways to get around that is to use <a title="Guava" href="https://code.google.com/p/guava-libraries/" target="_blank">Guava</a> which has a lot of convenience classes that for Java, and to use some sort of event bus such as Square’s <a title="Otto" href="https://github.com/square/otto" target="_blank">Otto</a> to avoid callback nightmare.</p>
<p dir="ltr">Hopefully these tools help you with your next Hackathon. If you have any suggestions/tips please feel free to leave a comment. Keep hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Security Part 1 - Reverse Engineering Android Apps]]></title>
    <link href="http://chrisarriola.me/blog/2012/08/31/android-security-part-1-reverse-engineering-android-apps/"/>
    <updated>2012-08-31T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/08/31/android-security-part-1-reverse-engineering-android-apps</id>
    <content type="html"><![CDATA[<p>
Google introduced automatic support for <strong>ProGuard</strong>, a code obfuscation tool, in ADT as early as December 2010 in version 8.0.0. It is integrated into the build system to make code obfuscation a pretty &#8220;straightforward&#8221; process. Since then, Google has encouraged—albeit not proactively—developers to enable ProGuard to prevent hackers from reverse engineering and hacking applications. Despite enabling ProGuard, however, a very persistent hacker may still be able to reverse engineer a ProGuard-ed application but the task becomes exponentially harder. There are other good practices developers should abide by to ensure a secure app, but code obfuscation should always be the first line of defense (more information on code obfuscation on Android <a title="ProGuard" href="http://android-developers.blogspot.com/2010/09/proguard-android-and-licensing-server.html">here</a> and <a title="ProGuard 2" href="http://android-developers.blogspot.com/2010/09/securing-android-lvl-applications.html">here</a>).

Out of curiosity, I went ahead and did some reverse engineering on some popular apps (all have more than 1 million downloads on Google Play) that may contain user sensitive information and un/surprisingly, 10 out of 12 weren&#8217;t doing some sort of code obfuscation. I&#8217;m sharing in this post what and how I did that to point out 2 things: (1) how easy it is to reverse engineer an app, and (2) to increase awareness of the importance of security specifically code obfuscation.
</p>

<br />
<h3>Methodology</h3>
<br />


My methodology was simple, in fact, a quick Google Search on &#8221;<em>Android Hacking</em>&#8221; should give anyone the tools to do this. Below are the steps: <br /><br />
<ol>
	<li>Obtain the .apk files of the applications of interest by using <em>Astro File Manager</em>. Simply navigate to &#8220;tools&#8221; in the options menu, &#8220;Application Backup&#8221;, and then select all the apps you&#8217;re interested in. Once backup is perform, an image is obtained of the apps and the corresponding .apk files will be stored under your SD card&#8217;s <em>backups/</em> directory.</li>
	<li>Unpack .apk file using <em>unzip</em>.</li>
	<li>Disassemble compiled <em>classes.dex</em> file using <a title="smali/baksmali" href="http://code.google.com/p/smali/">baksmali</a>. This will generate tons of .smali files.</li>
	<li>Perform static analysis on .smali files.</li>
</ol>
<br>
For step 4, if an application does not have code obfuscation, then all static constant declarations can be read in plain text (<span style="color:#ff0000;">red flag</span>!). You can still take things a step further, for instance, by writing smali code and retracing your steps to create your own custom hacked-out app.

<br /><br />
<h3>Results</h3>

Understanding <em>smali</em> code is pretty straightforward event without prior knowledge of the language especially when it comes to finding static member fields. Declared String values are human-readable.

Here are a few screen-shots of what I&#8217;ve found:

<br />
<a href="http://chrisarriola.files.wordpress.com/2012/08/secret.png"><img class="size-full wp-image-435" title="Key 1" src="http://chrisarriola.files.wordpress.com/2012/08/secret.png" alt="" width="510" height="22" /></a> Fig. 1
<a href="http://chrisarriola.files.wordpress.com/2012/08/secret2.png"><img class="size-full wp-image-434" title="Key 2" src="http://chrisarriola.files.wordpress.com/2012/08/secret2.png" alt="" width="510" height="37" /></a> Fig. 2
<a href="http://chrisarriola.files.wordpress.com/2012/08/secret3.png"><img class="size-full wp-image-433" title="Key 3" src="http://chrisarriola.files.wordpress.com/2012/08/secret3.png" alt="" width="510" height="26" /></a> Fig. 3
<a href="http://chrisarriola.files.wordpress.com/2012/08/secret4.png"><img class="size-full wp-image-432" title="secret4" src="http://chrisarriola.files.wordpress.com/2012/08/secret4.png" alt="" width="510" height="16" /></a> Fig. 4

<br /> <br />
<h3>Conclusion</h3>


ProGuard creates drastic improvements in security. Here&#8217;s an example of how smali code would look like with ProGuard on vs. with ProGuard off.

Say your <em>Activity </em>has a static member field <em>HACK_THIS</em>:<br />

<a href="http://chrisarriola.files.wordpress.com/2012/08/java-code1.png"><img class="size-full wp-image-444" title="java-code" src="http://chrisarriola.files.wordpress.com/2012/08/java-code1.png" alt="" width="510" height="320" /></a> Fig. 5<br /><br />

When we disassemble the resulting .dex file without ProGuard enabled, we get this:<br /><br />

<a href="http://chrisarriola.files.wordpress.com/2012/08/proguarded.png"><img class="size-full wp-image-442" title="ProGuarded" src="http://chrisarriola.files.wordpress.com/2012/08/proguarded.png" alt="" width="510" height="484" /></a> Fig. 6<br /><br />

Whereas code obfuscation using ProGuard results in: <br /><br />

<a href="http://chrisarriola.files.wordpress.com/2012/08/proguarded1.png"><img class="aligncenter size-full wp-image-449" title="proguarded" src="http://chrisarriola.files.wordpress.com/2012/08/proguarded1.png" alt="" width="510" height="485" /></a><br /><br />

From this comparison, you can observe the following: enabling ProGuard in this situation removes the human-readable static member field whereas disabling it leaves it in plain-text in smali assembly code. Although the content of the String gets copied wherever it is used in code as seen on line 39 in Figure 7, the context of what that String represents is virtually unknown. Again, a persistent hacker may deduce what that means through brute-force, but ProGuard increases the complexity of the task.

#####

Any tips on how to create a secure Android app? Leave a comment below!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android: Capture and Crop an Image]]></title>
    <link href="http://chrisarriola.me/blog/2012/07/18/android-capture-and-crop-an-image/"/>
    <updated>2012-07-18T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/07/18/android-capture-and-crop-an-image</id>
    <content type="html"><![CDATA[One line: Intent cropIntent = <span style="color:#3366ff;"><strong>new</strong></span> Intent(<span style="color:#0000ff;">&#8220;com.android.camera.action.CROP&#8221;</span>);

Great tutorial from mobile tuts+: <a href="http://mobile.tutsplus.com/tutorials/android/capture-and-crop-an-image-with-the-device-camera/">http://mobile.tutsplus.com/tutorials/android/capture-and-crop-an-image-with-the-device-camera/</a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Data with ListView + Loading Footer]]></title>
    <link href="http://chrisarriola.me/blog/2012/06/15/dynamic-data-with-listview-loading-footer/"/>
    <updated>2012-06-15T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/06/15/dynamic-data-with-listview-loading-footer</id>
    <content type="html"><![CDATA[<p>
A pretty common UI design pattern for  ListViews on Android is displaying a loading footer for the dynamic loading of a list. It&#8217;s a pattern used by several well known apps - Twitter, Gmail and Instagram to mention a few - to display data without having to click a button to paginate through information. Essentially, as a user scrolls down to the end of a list, which indicates the end of the current page, a loading indicator is displayed at the footer of the list to notify the user that the list is in the process of populating more data.</p>

<div style="text-align:center;">
    <a href="http://chrisarriola.files.wordpress.com/2012/06/dynamiclist.png"><img class="size-full wp-image-389" title="Dynamic List" src="http://chrisarriola.files.wordpress.com/2012/06/dynamiclist.png" alt="" width="510" height="340" /></a> 
</div>

<div style="text-align:center;">
    <a href="http://www.androidpatterns.com/uap_pattern/dynamic-loading-of-a-list">Dynamic Loading of a List</a>
</div><br>

<p>
While playing around with this pattern, I was quite surprise how not-so-straightforward it was to implement this (then again, that&#8217;s programming for you). With that said, I&#8217;d like to share my implementation with you in case you&#8217;re trying to use this pattern in your application.
</p>

<h3>Trial 1</h3>
The intuitive way to go about this is to (1) simply attach an Adapter with the first page of items to a ListView, (2) attach an OnScrollListener to detect if the bottom of the list has been reached, if so, (3) add a loading footer view to the list while retrieving more data, and when the retrieval process is done, remove the loading footer and (4) update the adapter with the recently pulled data.

Sounds pretty straightforward right? Turns out, it&#8217;s not.

Here&#8217;s some code snippets of the above approach.

(1) &amp; (2)
<pre>ListView list = (ListView) findViewById(R.id.listview);
MyAdapter adapter = new MyAdapter(context, items);
list.setAdapter(adapter);

list.setOnScrollListener(new OnScrollListener() {
    @Override
    public void onScrollStateChanged(AbsListView view, 
            int scrollState) {
         <span style="color:#339966;">// Do nothing</span>
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, 
            int visibleItemCount, int totalItemCount) {

        <span style="color:#339966;">// threshold being indicator if bottom of list is hit</span>
        if (firstVisibleItem = threshold) {
            pullMoreData();
        }
    }
});</pre>
(3) &amp; (4)
<pre>private void pullMoreData() {
    doNetworkRequest(page); <span style="color:#339966;">// Perform request for next page</span>
    list.addFooterView(loadingFooter);
}

@Override
public void onNetworkRequestComplete(Request request) {
    list.removeFooterView(loadingFooter);
    adapter.addAll(request.getData());
    adapter.notifyDataSetChanged();
}</pre>
This implementation, however, does not result in the intended action - the footer never gets displayed. A work-around I did for this leads me to&#8230;
<h3>Trial 2</h3>
With my second trial, I did this: (1) attached the footer first before the adapter, and when the bottom of the list has been reached and new data has been retrieved, (2) reattach the footer and create a new adapter with the old+new data which is then reattached to the list. Finally, to bring the user back to the scroll position, I (3) keep track of the first visible item on the scroll view and set the list selection to be this item.

Immediately, a few things must be popping up in your head such as: that must be slow! it&#8217;s a hack! there has to be a cleaner way! etc. I can&#8217;t agree with you more.

(1), (2) &amp; (3)
<pre>ListView list = (ListView) findViewById(R.id.listview);
list.addFooterView(loadingFooter);

MyAdapter adapter = new MyAdapter(context, items);
list.setAdapter(adapter);

list.setOnScrollListener(new OnScrollListener() {
    @Override
    public void onScrollStateChanged(AbsListView view, 
            int scrollState) {
         <span style="color:#339966;">// Do nothing</span>
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, 
            int visibleItemCount, int totalItemCount) {

<span style="color:#339966;"> // member variable for restoring selection</span>
        mSelection = firstVisibleItem;

<span style="color:#339966;"> // threshold being indicator if bottom of list is hit</span>
        if (firstVisibleItem = threshold) {
            pullMoreData();
        }
    }
});

@Override
public void onNetworkRequestComplete(Request request) {
    list.removeFooterView(loadingFooter);
    list.addFooterView(loadingFooter);

    MyAdapter newAdapter = new MyAdapter(this);
    newAdapter.addOldData(adapter);
    newAdapter.addAll(request.getData());

    list.setAdapter(newAdapter);
    adapter = newAdapter;

<span style="color:#339966;"> // Set table to last selection</span>
    list.setSelection(mSelection)
}</pre>
Albeit some performance issues and jerkiness because of (3), this implementation actually works.

Can we do better than this?
<h3>Trial 3</h3>
The trick, it turns out, is to <strong>attach the footer view before setting the adapter</strong>, this way, any combination of adding and removing of the footer view/s just works. <strong>Why does it have to be in order</strong>!? If you have the answer, please leave a comment. I&#8217;d love to know
<pre>ListView list = (ListView) findViewById(R.id.listview);
list.addFooterView(loadingFooter);

MyAdapter adapter = new MyAdapter(context, items);
list.setAdapter(adapter);

<span style="color:#339966;">// this step is important to not display the footer view // right of the bat.</span>
list.removeFooterView(loadingFooter);

list.setOnScrollListener(new OnScrollListener() {
    @Override
    public void onScrollStateChanged(AbsListView view, 
            int scrollState) {
<span style="color:#339966;"> // Do nothing</span>
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, 
            int visibleItemCount, int totalItemCount) {
<span style="color:#339966;"> // threshold being indicator if bottom of list is hit</span>
        if (firstVisibleItem = threshold) {
            pullMoreData();
        }
    }
});</pre>
I&#8217;ll share more Android quirks as they come up, I hope this helped.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Too Many to One - Implementing mHealth]]></title>
    <link href="http://chrisarriola.me/blog/2012/06/06/too-many-to-one/"/>
    <updated>2012-06-06T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/06/06/too-many-to-one</id>
    <content type="html"><![CDATA[For about a year and a half now, I&#8217;ve been volunteering with <a title="Global HEED" href="http://globalheed.org/">Global HEED</a>—a non-profit organization focused on supporting health, education, and economic development globally. Global HEED was started in 2008 by founders Sonny Bandyopadhyay and Zain Ahmed while both pursuing their degrees at the University of Emory. Over the course of 5 years, Global HEED has made a tremendous impact in communities around the world, most notably, in a small village in Guatemala called Calhuitz. Medical students enroll to become a summer fellow wherein they will be responsible for any of the following: developing &amp; teaching public health topics, assessing the communities needs, shadowing/assisting a doctor or nurse, etc. Some of the projects in the past involved building a pharmacy, a community health worker training center, and even first community health clinic in Calhuitz.

The newest project within Global HEED is the mHealth initiative—a telemedicine project whose goal is to improve the quality of healthcare in under-served communities. Specifically, we&#8217;re collaborating with <a title="Partners for Care" href="http://www.partnersforcare.org/">Partners for Care</a>, an NGO based in Kenya, to implement mHealth in the slums of Nairobi by utilizing <a title="Sana Mobile" href="http://sana.mit.edu/">Sana Mobile</a>.
<h4>Problem</h4>
The underlying problem is this: there are too many people in need of healthcare but there aren&#8217;t enough physicians that can support that need. As a result, not everyone gets treated; in addition, taking into account waiting and travel time, visiting a clinic or hospital can be very time consuming. In some instances, patients have to travel ~10 km by foot to pay a visit to the nearest clinic. It&#8217;s a very brutal experience as you might imagine.
<h4>Proposed Solution</h4>
To alleviate this, we implemented Sana as essentially a triaging tool to improve  the delivery and efficiency of healthcare. It works as follows: a community health worker visits a patient and enters the necessary information through the mobile device (patient information, symptoms, photos, etc.), the information is then sent to an electronic medical record system, <a title="OpenMRS" href="http://openmrs.org/">OpenMRS</a>, wherein a remote doctor can send a diagnosis back to the community health worker who would then perform the necessary action (more on this <a title="Case Study - Kenya" href="http://sana.mit.edu/2012/06/02/case-study-kenyan-mhealth-project/">here</a>). Although the entire process seems simple, there&#8217;s still a couple of BIG obstacles to go through before we can comfortably expand into other regions. To name a few, we need to verify uploading information to the EMR works 99% of the time, that patient data is consistent with what&#8217;s recorded, that the community generally accepts the technology, that the project can be evaluated in a metric and quantifiable way&#8230; thinking about all this is giving me a headache.
<h4>Conclusion</h4>
Despite all these obstacles, seeing the passion within the organization itself, that is Global HEED, gives me the confidence that these &#8220;minor&#8221; obstacles can be eventually surpassed. For instance, even though members of Global HEED are from all over the nation—Atlanta, San Francisco, and New York City to name a few—we somehow still manage to consistently collaborate and work towards the same goal thanks to the very passionate leaders within the organization. Not to mention, our use of technology for communication, which enables us to connect, should be a testament to the potential of technology for improving the lives of those around us; not just for those a few houses away, but also for those on the opposite side of the globe.
<blockquote>We who work in technology have nurtured an especially rare gift: the opportunity to effect change at an unprecedented scale and rate. Technology, community, and capitalism combine to make Silicon Valley the potential epicenter of vast positive change. We can tackle the world’s biggest problems and take on bold missions like fixing education, re-imagining energy distribution, connecting people, or even democratizing democracy. And with increasingly severe threats to our survival — rapid climate change, an unstable international economy, and unsustainable energy consumption — it is more important than ever that we use these gifts to change the world, foster happiness and alleviate suffering, for us and our fellow beings.

by <em>Justin Rosentein</em></blockquote>
#####

If you&#8217;re a developer and would like to contribute to the project, please feel free to reach out! You can also just jump and start pushing code into the Sana <a title="Sana Source Code" href="http://sana.mit.edu/wiki/index.php?title=Main_Page">source code</a> repository, it&#8217;s open source.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Goals]]></title>
    <link href="http://chrisarriola.me/blog/2012/05/30/incremental-goals/"/>
    <updated>2012-05-30T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/05/30/incremental-goals</id>
    <content type="html"><![CDATA[Check my post on the JOCC blog about setting <a href="http://wp.me/p1YHaV-3e">Incremental Goals</a>.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Android Layouts]]></title>
    <link href="http://chrisarriola.me/blog/2012/05/23/optimizing-android-layouts/"/>
    <updated>2012-05-23T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/05/23/optimizing-android-layouts</id>
    <content type="html"><![CDATA[I recently used the <strong>hierarchyviewer</strong> &amp; <strong>lint </strong>tool in the Android SDK and was pretty surprised with the results I saw. Many of the views I had were heavily nested and some views did not necessarily have to be inflated off the bat (progress indicators and refresh icons to name a few). As a result, my activity took a performance hit because of a badly designed layout.

Here&#8217;s a technique I used that I picked up at AnDevCon III to flatten my layouts and in general make them more performant.
<h3><strong>ViewStub</strong></h3>
Essentially, ViewStub is a lightweight and cheap to inflate widget that you can include in a layout. Its purpose is basically to serve as a stub or placeholder for views that don&#8217;t necessarily need to be inflated on creation. For example, let&#8217;s say your app displays notifications on a SlidingDrawer; however, when there are no notifications, that SlidingDrawer should be hidden. What you can do then is create a ViewStub that points to your SlidingDrawer layout implementation and when notifications are present, you can simply inflate the ViewStub. Here&#8217;s an example taken from <a href="http://developer.android.com/resources/articles/layout-tricks-stubs.html">Android Developers</a> that displays the flattening of the view hierarchy using ViewStubs.

Layout without ViewStub:

[caption id=&#8221;attachment_341&#8221; align=&#8221;aligncenter&#8221; width=&#8221;510&#8221;]<a href="http://chrisarriola.files.wordpress.com/2012/05/viewstub41.png"><img class="size-full wp-image-341 " title="Layout Without ViewStub" src="http://chrisarriola.files.wordpress.com/2012/05/viewstub41.png" alt="" width="510" height="431" /></a> Layout Without ViewStub[/caption]

Layout using ViewStub:

[caption id=&#8221;attachment_342&#8221; align=&#8221;aligncenter&#8221; width=&#8221;468&#8221;]<a href="http://chrisarriola.files.wordpress.com/2012/05/viewstub3.png"><img class="size-full wp-image-342 " title="Layout With ViewStub" src="http://chrisarriola.files.wordpress.com/2012/05/viewstub3.png" alt="" width="468" height="476" /></a> Layout With ViewStub[/caption]

The code for your layout:
<blockquote>
<pre><span style="color:#0000ff;">&lt;ViewStub</span>
<span style="color:#ff00ff;">android:id</span>=<span style="color:#339966;">"@+id/stub_slidingdrawer"</span>
<span style="color:#ff00ff;">android:layout</span>=<span style="color:#339966;">"@layout/slidingdrawer"</span>
<span style="color:#ff00ff;">android:layout_width</span>=<span style="color:#339966;">"fill_parent"</span>
<span style="color:#ff00ff;">android:layout_height</span>=<span style="color:#339966;">"wrap_content"</span>
<span style="color:#0000ff;">/&gt;</span></pre>
</blockquote>
<span style="color:#0000ff;"><span style="color:#000000;">The code to inflate the ViewStub:</span></span>
<blockquote><span style="color:#0000ff;"><span style="color:#000000;">ViewStub stub = (ViewStub) findViewById(R.id.<span style="color:#0000ff;"><em>stub_slidingdrawer</em></span>);</span>
<span style="color:#000000;">View v = stub.inflate();</span> </span></blockquote>
For my specific case, it took about half the time to inflate the entire layout tree by using a ViewStub for infrequently used child layouts. Pretty sweet.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Avoid Getting a Ticket When Running a Red Light]]></title>
    <link href="http://chrisarriola.me/blog/2012/05/14/how-to-avoid-getting-a-ticket-when-running-a-red-light/"/>
    <updated>2012-05-14T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/05/14/how-to-avoid-getting-a-ticket-when-running-a-red-light</id>
    <content type="html"><![CDATA[[caption id=&#8221;attachment_331&#8221; align=&#8221;aligncenter&#8221; width=&#8221;510&#8221;]<a href="http://chrisarriola.files.wordpress.com/2012/05/xlarge_8ca4aa827c1151851324895f5ffb778b.jpg"><img class="size-full wp-image-331" title="SQL Injection" src="http://chrisarriola.files.wordpress.com/2012/05/xlarge_8ca4aa827c1151851324895f5ffb778b.jpg" alt="" width="510" height="286" /></a> http://gizmodo.com/5498412/sql-injection-license-plate-hopes-to-foil-euro-traffic-cameras[/caption]

&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to create popups in Android]]></title>
    <link href="http://chrisarriola.me/blog/2012/05/10/how-to-create-popups-in-android/"/>
    <updated>2012-05-10T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/05/10/how-to-create-popups-in-android</id>
    <content type="html"><![CDATA[Great tutorial!

<a href="http://wp.me/p26YYL-8n">How to create popups in Android</a>.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Learning Resources]]></title>
    <link href="http://chrisarriola.me/blog/2012/05/01/self-learning-resources/"/>
    <updated>2012-05-01T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/05/01/self-learning-resources</id>
    <content type="html"><![CDATA[One of the many pleasures in life involves learning something new. Whether it be learning a new culture, learning how to paint, learning how to write creatively, or learning how to fly a kite; the act of &#8220;knowing&#8221; something is nothing less than exciting. With that said, I&#8217;m a firm believer in the active pursuit of self-learning and self-education—who said learning should stop in school? Perhaps graduating school is the end of formal learning, but if it were the end of learning in itself, life would be very, very, boring.

Below are some resources I&#8217;ve used in the past for taking free online classes. As my Calc 2 professor would say, these resources are &#8220;jewels in a priceless treasure chest&#8221;.

<strong>Coursera: </strong><a href="https://www.coursera.org/">https://www.coursera.org/</a>

<strong>Academic Earth: </strong><a href="http://www.academicearth.org/">http://www.academicearth.org/</a>

<strong>Khan Academy: </strong><a href="http://www.khanacademy.org/">http://www.khanacademy.org/</a>

<strong></strong><strong>MIT Open Courseware: </strong><a href="http://ocw.mit.edu/">http://ocw.mit.edu/</a>

<strong></strong><strong>Engineer Guy: </strong><a href="http://www.engineerguy.com/">http://www.engineerguy.com/</a>

<strong>Google Code University: </strong><a href="http://code.google.com/edu/">http://code.google.com/edu/</a>

<strong></strong>&#8230;and of course it goes without saying that another great resource for self-learning is&#8230; a book! I&#8217;m currently using <a href="www.goodreads.com">www.goodreads.com</a> to find good recommendations based on books I&#8217;ve read on the past, and it&#8217;s also a good social website to view what your friends are currently reading and what they&#8217;ve read in the past.

I hope you find these priceless &#8220;jewels&#8221; as invaluable as I found them. Enjoy!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Countdown Timer on Android]]></title>
    <link href="http://chrisarriola.me/blog/2012/05/01/countdown-timer-on-android/"/>
    <updated>2012-05-01T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/05/01/countdown-timer-on-android</id>
    <content type="html"><![CDATA[An <a href="http://chrisarriola.wordpress.com/2012/03/12/first-android-application-napp/">exercise</a> I did to practice threading on Android is to implement a simple countdown timer. To do this, I used a <em>Handler</em> and added a <em>Runnable</em> Object—which performs the countdown—to it&#8217;s message queue.

Here&#8217;s a snippet of the Runnable Object:
<pre>Runnable mTimerTask = new Runnable() {
@Override
public void run() {
  long currTime = System.currentTimeMillis();
  long currTimeSysClock = SystemClock.uptimeMillis();
  long timeLeftMillis = mWakeUpTime - currTime;
  int seconds = (int) timeLeftMillis / 1000;
  int minutes = seconds / 60;
  int hours = minutes / 60;
  seconds %= 60;
  minutes %= 60;
  updateTime(mSecondView, seconds);
  updateTime(mMinuteView, minutes);
  updateTime(mHourView, hours);

  if (hours == 0 &amp;&amp; minutes == 0 &amp;&amp; seconds == 0) {
    mTimerHandler.removeCallbacks(this);
  } else {
    mTimerHandler.postAtTime(this, currTimeSysClock + 1000);
  }
  }
};</pre>
Finally, passing the Runnable object to the Handler&#8217;s <em>post()</em> method will initiate the countdown sequence.

Essentially, the run method gets called every 1 second following the first call to run ( <em>postAtTime()</em> ). The process is then repeated until the countdown reaches 0. To prevent reseting the wake up time, the wake up time (<em>mWakeUpTime</em>) is saved in the app&#8217;s shared preferences.

Another approach that could&#8217;ve also been used is through the use of an <em>AsyncTask</em>. However, for a simple task such as a countdown timer and since we want to control the specific time a thread runs, a Handler would be the best way to go.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android FTW]]></title>
    <link href="http://chrisarriola.me/blog/2012/04/12/android-ftw/"/>
    <updated>2012-04-12T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/04/12/android-ftw</id>
    <content type="html"><![CDATA[At last, the most anticipated app for Android came out a few days ago: Instagram for Android. For the first 12 hours, they hit an amazing 1 million Android app downloads! Now they&#8217;re at the ~6 million mark and they just got bought out by Facebook for $1 billion. I thought to myself: &#8220;great, now everyone is happy.&#8221;

I couldn&#8217;t have been more wrong.

An alarming number of iPhone users and apple fans were ranting about how lame Instagram is now that it&#8217;s open to Android users. Here&#8217;s a few example of what people were saying:
<p style="text-align:center;"><a href="http://chrisarriola.files.wordpress.com/2012/04/hatetweets.png"><img class="size-full wp-image-305 aligncenter" title="hatetweets" src="http://chrisarriola.files.wordpress.com/2012/04/hatetweets.png" alt="" width="510" height="492" /></a></p>
For the majority of the smartphone population, Android has always been perceived as being &#8220;low quality&#8221; compared to the iPhone. Social status has a big influence to Android being perceived this way. All the wealthy folks can brag about how awesome their iPhone is whereas people on the low-end have to compromise with shitty Android phones since they&#8217;re too poor to buy iPhones, right? If you look at a lot of high-end Android phones though, this is obviously not the case. iPhone users, however, still feel that they&#8217;re getting the best bang for their buck because of the exceptional brand-value Apple established for itself thanks to Steve Jobs. Looking beyond the surface though, there are many pros about Android which makes me believe otherwise.

Here&#8217;s why I think Android is pure awesomeness.

<h3>Options</h3>

I enjoy having many options. This goes for food, clothes, places, as well as phones. One of the features I particularly enjoy that some Android phones have is a physical keyboard—which is something iPhone lacks. Not going to lie though, iPhone&#8217;s hardware is beautiful but the idea of having only a single option doesn&#8217;t really float my boat.

<h3>Inexpensive</h3>

When I first used a smartphone I was frikin&#8217; hooked. I could simply Google questions like: &#8220;what&#8217;s the weather tomorrow?&#8221;, &#8220;how does the internet work?&#8221;, &#8220;when and where will be the next meteor shower?&#8221;, etc. Better yet, I can find location and context-specific answers to questions such as &#8220;where&#8217;s the closest restaurant/bar?&#8221;, &#8220;where can I get orange juice?&#8221;, etc. With smartphones, answers to such questions are virtually at your fingertips, anywhere you go. In the past, this was only available to the privileged, however, nowadays (thanks to Android) <a href="http://singularityhub.com/2011/08/16/80-android-phone-sells-like-hotcakes-in-kenya-the-world-next/">anyone can get a smartphone for as cheap as $80</a>! Why should only the rich have access to things like this when the less-fortunate would benefit from it the most?

<h3>Open-Source</h3>

Anyone can go in and look at Android&#8217;s source code and create a custom OS. Because Android is Open Source, we can expect many different flavors that suit different needs—android running on <a href="http://www.shopping.hp.com/product/printer/Photosmart/1/storefronts/CQ140A%2523B1H">printers</a>, android running on <a href="http://www.barnesandnoble.com/u/nook/379003208/">e-readers</a>, etc. These are only a few examples and expect Android to dominate the OS of choice for other embedded systems.

<h3>Cross-Application Integration</h3>

One word: Intents.

Android Intents essentially enable applications to &#8220;talk&#8221; to each other. What that means to the end-user is that you have many different options (depending on the apps installed on your device) when let&#8217;s say for instance you want to share a location, article, photo, etc. Whereas on other platforms such as the iPhone, you&#8217;re limited to only what the OS provides which is typically the native apps such as messaging/e-mail. This of course is not only limited to sharing content. Another example would be if you have a camera/photo application and want to launch that app for another app that takes pictures. Assuming that app exposes it&#8217;s functionality (side note: why doesn&#8217;t Instagram do this?), on Android you would be able to do that without going through intermediate steps, i.e. capturing a photo with app 1, saving image, opening app 2&#8230; I think you get the point.
<p style="text-align:center;"><a href="http://chrisarriola.files.wordpress.com/2012/04/androideatingapple.png"><img class="aligncenter" title="androideatingapple" src="http://chrisarriola.files.wordpress.com/2012/04/androideatingapple.png?w=258" alt="" width="258" height="300" /></a><a href="http://chrisarriola.files.wordpress.com/2012/04/androideatingapple.png">
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Android Application: Napp]]></title>
    <link href="http://chrisarriola.me/blog/2012/03/12/first-android-application-napp/"/>
    <updated>2012-03-12T00:00:00-05:00</updated>
    <id>http://chrisarriola.me/blog/2012/03/12/first-android-application-napp</id>
    <content type="html"><![CDATA[<a href="http://chrisarriola.files.wordpress.com/2012/03/launcher.png"><img class="aligncenter" src="http://chrisarriola.files.wordpress.com/2012/03/launcher.png?w=86" alt="Image" /></a>

Just published my first Android application: Napp. Check it out on Google Play!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing It Down]]></title>
    <link href="http://chrisarriola.me/blog/2012/02/25/writing-it-down/"/>
    <updated>2012-02-25T00:00:00-06:00</updated>
    <id>http://chrisarriola.me/blog/2012/02/25/writing-it-down</id>
    <content type="html"><![CDATA[<blockquote><strong>&#8220;Most slow hunches never last long enough to turn into something useful, because they pass in and out of our memory too quickly, precisely because they possess a certain murkiness. You get a feeling that there&#8217;s an interesting avenue to explore, a problem that might someday lead you to a solution, but then you get distracted by more pressing matters and the hunch disappears. So part of the secret of hunch cultivation is simple: write everything down.&#8221; </strong>
<p style="text-align:right;"><strong></strong><em>—</em> <em>Steven Johnson</em></p>
</blockquote>
]]></content>
  </entry>
  
</feed>
