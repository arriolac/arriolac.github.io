<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Chris Arriola]]></title>
  <link href="http://chrisarriola.me/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://chrisarriola.me/"/>
  <updated>2015-12-25T14:15:18-05:00</updated>
  <id>http://chrisarriola.me/</id>
  <author>
    <name><![CDATA[Chris Arriola]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Should you support landscape?]]></title>
    <link href="http://chrisarriola.me/blog/2015/12/21/should-you-support-landscape/"/>
    <updated>2015-12-21T15:49:18-05:00</updated>
    <id>http://chrisarriola.me/blog/2015/12/21/should-you-support-landscape</id>
    <content type="html"><![CDATA[<p>Android fragmentation is no joke. There are a total of <a href="http://opensignal.com/reports/2015/08/android-fragmentation/">~24,000 unique Android devices and 10 different versions of the OS in use as of 2015</a>. As Android developers, we want to support as many different devices and versions as possible but doing so can feel like going down a rabbit hole.</p>

<div id="image" style="text-align:center; text-size:10px;">
<img class="center" src="http://chrisarriola.me/images/android_device_fragmentation_2015.png" width="750" height="500">
<i>Android device fragmentation as of August 2015. <a href="http://opensignal.com/reports/2015/08/android-fragmentation">Source</a></i>
</div>


<p>On top of device and OS fragmentation, having to supporting yet another screen variant, landscape, adds even more complexity.</p>

<p>To simplify things, wouldn&rsquo;t it be great to lock the orientation mode of all screens to portrait and just say “our app doesn&rsquo;t support landscape?” And hey, while we&rsquo;re at it, “our app doesn&rsquo;t support anything below the latest version of Android, too.”</p>

<p>Seriously though, should you support landscape on Android?</p>

<p>Like any product decision, <em>the answer isn’t always quite that simple</em>.</p>

<p>There are a set of applications and screens where landscape makes sense. Say for example, when playing games, or, when watching videos. However, an overwhelming majority of apps used on phones are in portrait.</p>

<p>Based on a <a href="http://www.uxmatters.com/mt/archives/2013/02/how-do-users-really-hold-mobile-devices.php">mobile UX survey done by UXmatters in 2013</a>, only 10% of users orient the phone in landscape when using their phone with two-hands. This does not surprise me. Think about it, when was the last time you used your phone and an unintended screen rotation occurred? It can be annoying.</p>

<p>Because of these reasons, I can see why it is tempting to lock an app to only support portrait mode.</p>

<p>I can think of one good reason though why you shouldn’t do this and consider supporting landscape.</p>

<h3>Configuration Changes</h3>

<p>Configuration changes occur in runtime and are caused by various events such as: when keyboard visibility changes, when language changes, or  when orientation changes. This in turn causes the current foreground <code>Activity</code> to be reconstructed once the change finishes and all instance state will be recovered using Android’s parcelling mechanism via <code>Bundle</code>.</p>

<p>Framework Views automatically handle saving/restoring state (this is why you don&rsquo;t lose the content in an <code>EditText</code> on a configuration change); however, for a custom view, an <code>Activity</code>, or a <code>Fragment</code>, instance state will not be automatically recovered by the framework. Instead, instance state needs to be explicitly retained in certain life cycle events. It&rsquo;s really easy to miss an instance state that should be recovered, especially when orientation is locked, and so it&rsquo;s good practice to test configuration changes while developing. <em>Changing the orientation of the device is the simplest way to simulate that</em>.</p>

<p>Here&rsquo;s an example of how you should retain state across configuration changes in an <code>Activity</code>:</p>

<p>```
public class MainActivity extends Activity {</p>

<pre><code>private int someIntValue;

@Override
public void onSaveInstanceState(Bundle savedInstanceState) {
    // This is called by the system so that any instance that can be recovered
    // when the Activity is recreated.
    savedInstanceState.putInt(SOME_VALUE, someIntValue);
    super.onSaveInstanceState(savedInstanceState);
}

public void onRestoreInstanceState(Bundle savedInstanceState) {
    // This is called by the system when the Activity is reconstructed.
    super.onRestoreInstanceState(savedInstanceState);
    someIntValue = savedInstanceState.getInt(SOME_VALUE);
}
</code></pre>

<p>}
```</p>

<p>There are other lifecycle events where state can be restored such as in <code>Activity#onCreate()</code>. If you want to learn more about how this works, check out <a href="https://guides.codepath.com/android/Handling-Configuration-Changes">CodePath’s wiki</a>.</p>

<p>You might be saying, why not declare in the AndroidManifest that the Activity handles orientation configuration changes so that state will be retained automatically?</p>

<p>i.e.</p>

<p>```
&lt;activity android:name=”com.app.MyActivity”</p>

<pre><code>      android:configChanges=”orientation|screenSize” /&gt;
</code></pre>

<p>```</p>

<p>Although there are some valid use cases where you want to do this, this should be done as a last resort. This is a very common beginner mistake as it appears to get around the issue of saving state; however, doing so might have some unintended consequences. For example, say you want to declare a landscape/portrait-specific resource, that resource will not be loaded automatically on a configuration change and you need to instead explicitly load the resource in <code>Activity#onConfigurationChanged()</code>. Not knowing this consequence can be a pain to debug.</p>

<p>A quote from <a href="http://www.curious-creature.com/">Romain Guy</a>:</p>

<blockquote><p>&hellip;it is sometimes confusing for new Android developers who wonder why their activity is destroyed and recreated. Facing this “issue,” some developers choose to handle configuration changes themselves which is, in my opinion, a short-term solution that will complicate their life when other devices come out or when the application becomes more complex. The automatic resource handling is a very efficient and easy way to adapt your application’s user interface to various devices and devices configurations.</p></blockquote>

<p>Indeed, it is good practice to allow the system to do what it was designed to do as it allows your application to behave correctly on varying devices especially as your application gets more complex.</p>

<p>In conclusion, locking the device on a particular orientation—or letting the Activity handle orientation configuration changes—is a stopgap solution without taking into consideration how configuration changes work. Develop apps as if the user may drop off from the screen that they are currently on and ensure that state is appropriately saved/restored.</p>

<h3>TL;DR</h3>

<ul>
<li><p>if it’s purely a UX reason for locking orientation, do so but be cautious that the app still handles configuration changes properly.</p></li>
<li><p>if <code>configChanges=”orientation”</code> is added, make sure it’s actually needed (e.g. for performance reasons maybe because it’s really expensive to reconstruct the Activity, etc.).</p></li>
<li><p>if the above solutions are used merely to “solve” saving state on an orientation change, don’t do it.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preparing for a Hackathon (A Mobile Perspective)]]></title>
    <link href="http://chrisarriola.me/blog/2013/07/23/preparing-for-a-hackathon-a-mobile-perspective/"/>
    <updated>2013-07-23T00:00:00-04:00</updated>
    <id>http://chrisarriola.me/blog/2013/07/23/preparing-for-a-hackathon-a-mobile-perspective</id>
    <content type="html"><![CDATA[<p><a href="http://chrisarriola.files.wordpress.com/2013/07/536444_10150917662022200_1083819652_a.jpg"><img class="size-full wp-image  " id="i-461" alt="Image" align="middle" src="http://chrisarriola.files.wordpress.com/2013/07/536444_10150917662022200_1083819652_a.jpg?w=170" width="170" height="261" /></a></p>

<p dir="ltr">The time-pressure imposed at hackathons make it essential for teams to prepare ahead of time so that they can focus on the most critical tasks (building the actual product) the day of the event. Typically though, hackers come in without a team or idea. Whether you fall under this category or not, <em>preparation is still important</em>. Given that a full-blown business and a polished working product is unlikely to be built overnight, the point of a hackathon should be to learn as much as you can as well as form long-lasting relationships with people in your team—<strong>the burning desire for building and creating new things does not stop after a weekend</strong>!</p>


<p dir="ltr">Let’s say you do have a team and an idea to work on over the course of a sleep-deprived weekend. So where should you start? I thought I’d share some mobile-specific (Android and iOS) tools and projects you can leverage to bootstrap the development process.</p>




<h3>Back-end</h3>


<p dir="ltr">If you want to do data-persistence you can always build your own server logic, create RESTful APIs and create database schemas, but if you want a simple back-end service solution, the best option right now is to use <a title="Parse" href="www.parse.com" target="_blank">Parse</a>. <em>Parse</em> allows you to create models in a nice visual dashboard and then automatically creates a RESTful API for you to do CRUD operations on that model. Best of all, <em>Parse</em> is free until you hit a million requests on the API which is something you don’t have to worry about in a hackathon setting. In short, if you’re building a mobile app and you don’t have a dedicated server guy, go with <em>Parse</em>.</p>




<h3>Networking</h3>


<p dir="ltr">If you’re going to be integrating with some sort of web service (Facebook, Twitter, etc.), chances are, you’ll be using their APIs. Perhaps you might build your own API. Regardless, client-side you’ll need a pretty solid networking library to use. iOS and Android have their native implementations but you’ll be better of using a 3rd party library with a much simpler API that abstracts all the nitty-gritty details of HTTP. For iOS, <a title="AFNetworking" href="https://github.com/AFNetworking/AFNetworking" target="_blank">AFNetworking</a> and <a title="RestKit" href="https://github.com/RestKit/RestKit" target="_blank">RestKit</a> (uses <em>AFNetworking</em>) are the common solutions, whereas for Android, you have a couple of options but to name a few <a title="OkHTTP" href="https://github.com/square/okhttp" target="_blank">OkHTTP</a>, <a title="Retrofit" href="http://square.github.io/retrofit/" target="_blank">Retrofit</a> and <a title="android-async-http" href="https://github.com/loopj/android-async-http" target="_blank">android-async-http</a> are pretty solid.</p>




<h3>Convenience Libraries</h3>


<p dir="ltr">Do you make common mistakes on Android such as forgetting to check for <em>null</em>? Do you have the issue of stale objects such as Fragments and/or Activities when doing callbacks? A couple of ways to get around that is to use <a title="Guava" href="https://code.google.com/p/guava-libraries/" target="_blank">Guava</a> which has a lot of convenience classes that for Java, and to use some sort of event bus such as Square’s <a title="Otto" href="https://github.com/square/otto" target="_blank">Otto</a> to avoid callback nightmare.</p>


<p dir="ltr">Hopefully these tools help you with your next Hackathon. If you have any suggestions/tips please feel free to leave a comment. Keep hacking!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Security Part 1 - Reverse Engineering Android Apps]]></title>
    <link href="http://chrisarriola.me/blog/2012/08/31/android-security-part-1-reverse-engineering-android-apps/"/>
    <updated>2012-08-31T00:00:00-04:00</updated>
    <id>http://chrisarriola.me/blog/2012/08/31/android-security-part-1-reverse-engineering-android-apps</id>
    <content type="html"><![CDATA[<p>
Google introduced automatic support for <strong>ProGuard</strong>, a code obfuscation tool, in ADT as early as December 2010 in version 8.0.0. It is integrated into the build system to make code obfuscation a pretty "straightforward" process. Since then, Google has encouraged—albeit not proactively—developers to enable ProGuard to prevent hackers from reverse engineering and hacking applications. Despite enabling ProGuard, however, a very persistent hacker may still be able to reverse engineer a ProGuard-ed application but the task becomes exponentially harder. There are other good practices developers should abide by to ensure a secure app, but code obfuscation should always be the first line of defense (more information on code obfuscation on Android <a title="ProGuard" href="http://android-developers.blogspot.com/2010/09/proguard-android-and-licensing-server.html">here</a> and <a title="ProGuard 2" href="http://android-developers.blogspot.com/2010/09/securing-android-lvl-applications.html">here</a>).

Out of curiosity, I went ahead and did some reverse engineering on some popular apps (all have more than 1 million downloads on Google Play) that may contain user sensitive information and un/surprisingly, 10 out of 12 weren't doing some sort of code obfuscation. I'm sharing in this post what and how I did that to point out 2 things: (1) how easy it is to reverse engineer an app, and (2) to increase awareness of the importance of security specifically code obfuscation.
</p>




<br />


<h3>Methodology</h3>


<br />


<p>My methodology was simple, in fact, a quick Google Search on &ldquo;<em>Android Hacking</em>&rdquo; should give anyone the tools to do this. Below are the steps: <br /><br /></p>

<ol>
    <li>Obtain the .apk files of the applications of interest by using <em>Astro File Manager</em>. Simply navigate to "tools" in the options menu, "Application Backup", and then select all the apps you're interested in. Once backup is perform, an image is obtained of the apps and the corresponding .apk files will be stored under your SD card's <em>backups/</em> directory.</li>
    <li>Unpack .apk file using <em>unzip</em>.</li>
    <li>Disassemble compiled <em>classes.dex</em> file using <a title="smali/baksmali" href="http://code.google.com/p/smali/">baksmali</a>. This will generate tons of .smali files.</li>
    <li>Perform static analysis on .smali files.</li>
</ol>


<br>


<p>For step 4, if an application does not have code obfuscation, then all static constant declarations can be read in plain text (<span style="color:#ff0000;">red flag</span>!). You can still take things a step further, for instance, by writing smali code and retracing your steps to create your own custom hacked-out app.</p>

<br /><br />


<h3>Results</h3>


<p>Understanding <em>smali</em> code is pretty straightforward event without prior knowledge of the language especially when it comes to finding static member fields. Declared String values are human-readable.</p>

<p>Here are a few screen-shots of what I&rsquo;ve found:</p>

<br />


<p><a href="http://chrisarriola.files.wordpress.com/2012/08/secret.png"><img class="size-full wp-image-435" title="Key 1" src="http://chrisarriola.files.wordpress.com/2012/08/secret.png" alt="" width="510" height="22" /></a> Fig. 1
<a href="http://chrisarriola.files.wordpress.com/2012/08/secret2.png"><img class="size-full wp-image-434" title="Key 2" src="http://chrisarriola.files.wordpress.com/2012/08/secret2.png" alt="" width="510" height="37" /></a> Fig. 2
<a href="http://chrisarriola.files.wordpress.com/2012/08/secret3.png"><img class="size-full wp-image-433" title="Key 3" src="http://chrisarriola.files.wordpress.com/2012/08/secret3.png" alt="" width="510" height="26" /></a> Fig. 3
<a href="http://chrisarriola.files.wordpress.com/2012/08/secret4.png"><img class="size-full wp-image-432" title="secret4" src="http://chrisarriola.files.wordpress.com/2012/08/secret4.png" alt="" width="510" height="16" /></a> Fig. 4</p>

<br /> <br />


<h3>Conclusion</h3>


<p>ProGuard creates drastic improvements in security. Here&rsquo;s an example of how smali code would look like with ProGuard on vs. with ProGuard off.</p>

<p>Say your <em>Activity </em>has a static member field <em>HACK_THIS</em>:<br /></p>

<p><a href="http://chrisarriola.files.wordpress.com/2012/08/java-code1.png"><img class="size-full wp-image-444" title="java-code" src="http://chrisarriola.files.wordpress.com/2012/08/java-code1.png" alt="" width="510" height="320" /></a> Fig. 5<br /><br /></p>

<p>When we disassemble the resulting .dex file without ProGuard enabled, we get this:<br /><br /></p>

<p><a href="http://chrisarriola.files.wordpress.com/2012/08/proguarded.png"><img class="size-full wp-image-442" title="ProGuarded" src="http://chrisarriola.files.wordpress.com/2012/08/proguarded.png" alt="" width="510" height="484" /></a> Fig. 6<br /><br /></p>

<p>Whereas code obfuscation using ProGuard results in: <br /><br /></p>

<p><a href="http://chrisarriola.files.wordpress.com/2012/08/proguarded1.png"><img class="aligncenter size-full wp-image-449" title="proguarded" src="http://chrisarriola.files.wordpress.com/2012/08/proguarded1.png" alt="" width="510" height="485" /></a><br /><br /></p>

<p>From this comparison, you can observe the following: enabling ProGuard in this situation removes the human-readable static member field whereas disabling it leaves it in plain-text in smali assembly code. Although the content of the String gets copied wherever it is used in code as seen on line 39 in Figure 7, the context of what that String represents is virtually unknown. Again, a persistent hacker may deduce what that means through brute-force, but ProGuard increases the complexity of the task.</p>

<h4>#</h4>

<p>Any tips on how to create a secure Android app? Leave a comment below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android: Capture and Crop an Image]]></title>
    <link href="http://chrisarriola.me/blog/2012/07/18/android-capture-and-crop-an-image/"/>
    <updated>2012-07-18T00:00:00-04:00</updated>
    <id>http://chrisarriola.me/blog/2012/07/18/android-capture-and-crop-an-image</id>
    <content type="html"><![CDATA[<p>One line: Intent cropIntent = <span style="color:#3366ff;"><strong>new</strong></span> Intent(<span style="color:#0000ff;">&ldquo;com.android.camera.action.CROP&rdquo;</span>);</p>

<p>Great tutorial from mobile tuts+: <a href="http://mobile.tutsplus.com/tutorials/android/capture-and-crop-an-image-with-the-device-camera/"><a href="http://mobile.tutsplus.com/tutorials/android/capture-and-crop-an-image-with-the-device-camera/">http://mobile.tutsplus.com/tutorials/android/capture-and-crop-an-image-with-the-device-camera/</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Data with ListView + Loading Footer]]></title>
    <link href="http://chrisarriola.me/blog/2012/06/15/dynamic-data-with-listview-loading-footer/"/>
    <updated>2012-06-15T00:00:00-04:00</updated>
    <id>http://chrisarriola.me/blog/2012/06/15/dynamic-data-with-listview-loading-footer</id>
    <content type="html"><![CDATA[<p>
A pretty common UI design pattern for  ListViews on Android is displaying a loading footer for the dynamic loading of a list. It's a pattern used by several well known apps - Twitter, Gmail and Instagram to mention a few - to display data without having to click a button to paginate through information. Essentially, as a user scrolls down to the end of a list, which indicates the end of the current page, a loading indicator is displayed at the footer of the list to notify the user that the list is in the process of populating more data.</p>




<div style="text-align:center;">
    <a href="http://chrisarriola.files.wordpress.com/2012/06/dynamiclist.png"><img class="size-full wp-image-389" title="Dynamic List" src="http://chrisarriola.files.wordpress.com/2012/06/dynamiclist.png" alt="" width="510" height="340" /></a> 
</div>




<div style="text-align:center;">
    <a href="http://www.androidpatterns.com/uap_pattern/dynamic-loading-of-a-list">Dynamic Loading of a List</a>
</div>


<br>




<p>
While playing around with this pattern, I was quite surprise how not-so-straightforward it was to implement this (then again, that's programming for you). With that said, I'd like to share my implementation with you in case you're trying to use this pattern in your application.
</p>




<h3>Trial 1</h3>


<p>The intuitive way to go about this is to (1) simply attach an Adapter with the first page of items to a ListView, (2) attach an OnScrollListener to detect if the bottom of the list has been reached, if so, (3) add a loading footer view to the list while retrieving more data, and when the retrieval process is done, remove the loading footer and (4) update the adapter with the recently pulled data.</p>

<p>Sounds pretty straightforward right? Turns out, it&rsquo;s not.</p>

<p>Here&rsquo;s some code snippets of the above approach.</p>

<p>(1) &amp; (2)</p>

<pre>ListView list = (ListView) findViewById(R.id.listview);
MyAdapter adapter = new MyAdapter(context, items);
list.setAdapter(adapter);

list.setOnScrollListener(new OnScrollListener() {
    @Override
    public void onScrollStateChanged(AbsListView view, 
            int scrollState) {
         <span style="color:#339966;">// Do nothing</span>
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, 
            int visibleItemCount, int totalItemCount) {

        <span style="color:#339966;">// threshold being indicator if bottom of list is hit</span>
        if (firstVisibleItem = threshold) {
            pullMoreData();
        }
    }
});</pre>


<p>(3) &amp; (4)</p>

<pre>private void pullMoreData() {
    doNetworkRequest(page); <span style="color:#339966;">// Perform request for next page</span>
    list.addFooterView(loadingFooter);
}

@Override
public void onNetworkRequestComplete(Request request) {
    list.removeFooterView(loadingFooter);
    adapter.addAll(request.getData());
    adapter.notifyDataSetChanged();
}</pre>


<p>This implementation, however, does not result in the intended action &ndash; the footer never gets displayed. A work-around I did for this leads me to&hellip;</p>

<h3>Trial 2</h3>


<p>With my second trial, I did this: (1) attached the footer first before the adapter, and when the bottom of the list has been reached and new data has been retrieved, (2) reattach the footer and create a new adapter with the old+new data which is then reattached to the list. Finally, to bring the user back to the scroll position, I (3) keep track of the first visible item on the scroll view and set the list selection to be this item.</p>

<p>Immediately, a few things must be popping up in your head such as: that must be slow! it&rsquo;s a hack! there has to be a cleaner way! etc. I can&rsquo;t agree with you more.</p>

<p>(1), (2) &amp; (3)</p>

<pre>ListView list = (ListView) findViewById(R.id.listview);
list.addFooterView(loadingFooter);

MyAdapter adapter = new MyAdapter(context, items);
list.setAdapter(adapter);

list.setOnScrollListener(new OnScrollListener() {
    @Override
    public void onScrollStateChanged(AbsListView view, 
            int scrollState) {
         <span style="color:#339966;">// Do nothing</span>
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, 
            int visibleItemCount, int totalItemCount) {

<span style="color:#339966;"> // member variable for restoring selection</span>
        mSelection = firstVisibleItem;

<span style="color:#339966;"> // threshold being indicator if bottom of list is hit</span>
        if (firstVisibleItem = threshold) {
            pullMoreData();
        }
    }
});

@Override
public void onNetworkRequestComplete(Request request) {
    list.removeFooterView(loadingFooter);
    list.addFooterView(loadingFooter);

    MyAdapter newAdapter = new MyAdapter(this);
    newAdapter.addOldData(adapter);
    newAdapter.addAll(request.getData());

    list.setAdapter(newAdapter);
    adapter = newAdapter;

<span style="color:#339966;"> // Set table to last selection</span>
    list.setSelection(mSelection)
}</pre>


<p>Albeit some performance issues and jerkiness because of (3), this implementation actually works.</p>

<p>Can we do better than this?</p>

<h3>Trial 3</h3>


<p>The trick, it turns out, is to <strong>attach the footer view before setting the adapter</strong>, this way, any combination of adding and removing of the footer view/s just works. <strong>Why does it have to be in order</strong>!? If you have the answer, please leave a comment. I&rsquo;d love to know</p>

<pre>ListView list = (ListView) findViewById(R.id.listview);
list.addFooterView(loadingFooter);

MyAdapter adapter = new MyAdapter(context, items);
list.setAdapter(adapter);

<span style="color:#339966;">// this step is important to not display the footer view // right of the bat.</span>
list.removeFooterView(loadingFooter);

list.setOnScrollListener(new OnScrollListener() {
    @Override
    public void onScrollStateChanged(AbsListView view, 
            int scrollState) {
<span style="color:#339966;"> // Do nothing</span>
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, 
            int visibleItemCount, int totalItemCount) {
<span style="color:#339966;"> // threshold being indicator if bottom of list is hit</span>
        if (firstVisibleItem = threshold) {
            pullMoreData();
        }
    }
});</pre>


<p>I&rsquo;ll share more Android quirks as they come up, I hope this helped.</p>
]]></content>
  </entry>
  
</feed>
